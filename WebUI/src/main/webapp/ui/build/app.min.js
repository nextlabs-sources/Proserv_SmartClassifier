var mainApp = angular.module('mainApp', ['ui.router', 'ui.bootstrap', 'ui.numeric', 'uiSwitch', 'ngSanitize', 'pascalprecht.translate',
"templates-main",'ngAnimate', 'ngMessages', 'ngMaterial', 'ui.utils.masks', 'chart.js']);

mainApp.config(['$stateProvider', '$urlRouterProvider', '$translateProvider', '$mdThemingProvider', 'ChartJsProvider',
		function($stateProvider, $urlRouterProvider, $translateProvider, $mdThemingProvider, ChartJsProvider) {

			$mdThemingProvider.theme('default').primaryPalette('blue');

			ChartJsProvider.setOptions({
				colors : ['#5CB85C', '#F0AD4E', '#D9534F', '#222222', '#FDB45C', '#949FB1', '#4D5360']
			});

			$urlRouterProvider.otherwise('/Overview');

			// remove the trailing slash at the end of the url if exists
			$urlRouterProvider.rule(function($injector, $location) {

				var path = $location.path();
				var hasTrailingSlash = path[path.length - 1] === '/';

				if (hasTrailingSlash) {

					// if last charcter is a slash, return the same url
					// without the slash
					var newPath = path.substr(0, path.length - 1);
					return newPath;
				}

			});

			$stateProvider.state('overview', {
				url : '/Overview',
				templateUrl : 'ui/app/Overview/overview.html',
				controller : 'overviewController'
			}).state('rules', {
				url : '/Rules',
				templateUrl : 'ui/app/Rules/ruleList.html',
				controller : 'ruleListController'
			}).state('ruleDetails', {
				url : '/Rules/{id}',
				templateUrl : 'ui/app/Rules/ruleDetails.html',
				controller : 'ruleDetailsController'
			}).state('scservices', {
				url : '/Services/{type}',
				templateUrl : 'ui/app/SCServices/serviceList.html',
				controller : 'servicesListController'
			}).state('serviceDetails', {
				url : '/Services/{type}/{id}',
				templateUrl : 'ui/app/SCServices/serviceDetails.html',
				controller : 'serviceDetailsController'
			}).state('indexDatabaseQuery', {
				url : '/IndexDatabaseQuery/{id}',
				templateUrl : 'ui/app/IndexDatabaseQuery/indexDatabaseQuery.html',
				controller : 'indexDatabaseQueryController'
			}).state('indexDatabaseQueryTemp', {
				url : '/IndexDatabaseQuery',
				templateUrl : 'ui/app/IndexDatabaseQuery/indexDatabaseQuery.html',
				controller : 'indexDatabaseQueryController'
			}).state('indexDatabaseQueryResult', {
				url : "/IndexDatabaseQueryResult/{id}",
				templateUrl : "ui/app/IndexDatabaseQuery/indexDatabaseQueryResult.html",
				controller : "indexDatabaseQueryResultController"
			}).state('Plugins', {
				url : '/Settings/Plugins',
				templateUrl : 'ui/app/Settings/Plugins/pluginList.html',
				controller : 'pluginListController'
			}).state('PluginDetails', {
				url : '/Settings/Plugins/{id}',
				templateUrl : 'ui/app/Settings/Plugins/pluginDetails.html',
				controller : 'pluginDetailsController'
			}).state('JMS', {
				url : '/Settings/MessagingService',
				templateUrl : 'ui/app/Settings/JMS/jmsList.html',
				controller : 'jmsListController'
			}).state('JMSDetails', {
				url : '/Settings/MessagingService/{id}',
				templateUrl : 'ui/app/Settings/JMS/jmsDetails.html',
				controller : 'jmsDetailsController'
			}).state('login', {
				url : '/Login',
				templateUrl : 'ui/app/Login/login.html',
				controller : 'loginController'
			}).state('ExecutionWindow', {
				url : '/Settings/ExecutionWindow',
				templateUrl : 'ui/app/Settings/ExecutionWindow/executionWindowList.html',
				controller : 'executionWindowListController'
			}).state('ExecutionWindowDetails', {
				url : '/Settings/ExecutionWindow/{id}',
				templateUrl : 'ui/app/Settings/ExecutionWindow/executionWindowDetails.html',
				controller : 'executionWindowDetailsController'
			}).state('License', {
				url : '/Settings/License',
				templateUrl : 'ui/app/Settings/License/license.html',
				controller : 'licenseController'
			}).state('GeneralSettings', {
				url : '/Settings/GeneralSettings',
				templateUrl : 'ui/app/Settings/General/generalSettings.html',
				controller : 'generalSettingsController'
			})

			$translateProvider.useStaticFilesLoader({
				prefix : 'ui/app/i18n/',
				suffix : '.json'
			});
			$translateProvider.preferredLanguage('en');
			// Enable escaping of HTML
			$translateProvider.useSanitizeValueStrategy('sanitize');

		}]);

mainApp.filter('num', function() {
	return function(input) {
		return parseInt(input, 10);
	}
});;mainApp.controller('loginController', ['$scope', '$state', 'loggerService', '$location', function($scope, $state, loggerService, $location) {
	$scope.doLogin = function(username, pwd) {
		// login logic : server call etc

		$state.go('overview');
	}

	loggerService.getLogger().info("Logging");
	loggerService.getLogger().info($location.path())
}]);mainApp.controller('indexDatabaseQueryController', [
		'$scope',
		'$location',
		'loggerService',
		'$filter',
		'$stateParams',
		'generalService',
		'ruleService',
		'$state',
		'sharedService',
		'indexDatabaseQueryService',
		'configService',
		function($scope, $location, loggerService, $filter, $stateParams, generalService, ruleService, $state, sharedService, indexDatabaseQueryService, configService) {
			$scope.$parent.isDetailsPage = false;
			$scope.ruleID = $stateParams.id;
			$scope.sortOrders = configService.getSortOrders();
			$scope.sortOrder = $scope.sortOrders[0];

			if (!$scope.ruleID || $scope.ruleID.length === 0) {
				$scope.ruleID = 'custom';
			}

			// criteria variables
			ruleService.getMatchingConditions(function(data) {
				$scope.matchingConditions = data;
			});
			ruleService.getMetaDataMatchingConditions(function(data) {
				$scope.metaDataMatchingConditions = data
			});

			ruleService.getDataProviders(function(data) {
				$scope.dataProviders = data;
			});
			$scope.dataSections = ruleService.getDataSections();
			ruleService.getMetaDataList(function(data) {
				$scope.metaDataList = data;
			});

			// add criteria groups
			$scope.addCriteriaGroup = function() {
				if (!$scope.query) {
					$scope.query = {};
				}
				if (!$scope.query.criteria) {
					$scope.query.criteria = [];
				}

				$scope.query.criteria.push({
					"criterias" : [{
						"displayOrder" : 1,
						"dataSection" : "A",
						"fieldName" : "",
						"matchingCondition" : "CONTAINS",
						"value" : null
					}],
					"displayOrder" : $scope.query.criteria.length + 1,
					"operator" : "AND"
				})
			}

			// add criteria
			$scope.addCriteria = function(cg) {
				if (!cg.criterias) {
					cg.criterias = [];
				}

				cg.criterias.push({
					"displayOrder" : cg.criterias.length + 1,
					"dataSection" : "A",
					"fieldName" : "",
					"matchingCondition" : "CONTAINS",
					"value" : null
				});
			}

			if (sharedService.data.query) {
				$scope.query = angular.copy(sharedService.data.query);
			} else {
				if ($scope.ruleID === 'custom') {
					$scope.query = {};
					$scope.addCriteriaGroup();
				} else {
					ruleService.getRule($scope.ruleID, function(response) {
						$scope.query = {
							"criteria" : response.data.criteriaGroups,
							"directories" : response.data.directories
						}
					})
				}
			}

			// remove criteria group
			$scope.removeCriteriaGroup = function(index) {
				$scope.query.criteria.splice(index, 1);
			}

			// remove criteria
			$scope.removeCriteria = function(cg, index, cindex) {
				cg.criterias.splice(cindex, 1);
				if (cg.criterias.length === 0) {
					$scope.query.criteria.splice(index, 1);
				}
			}

			$scope.removeCriteriaGroup = function(index) {
				$scope.query.criteria.splice(index, 1);
			}

			$scope.changeDataSection = function(cri, section) {
				cri.dataSection = section;
				cri.matchingCondition = "CONTAINS";
				cri.value = null;
				if (section !== 'M') {
					cri.fieldName = "";
					cri.field = "";
				}
			}

			$scope.changeMatchingCondition = function(cri, condition) {
				cri.matchingCondition = condition.code;
				cri.value = null;
			}

			$scope.changeMetaMatchingCondition = function(cri, condition) {
				cri.matchingCondition = condition.code;
				cri.value = null;
				if (cri.fieldName && cri.fieldName.lastIndexOf('_') > -1) {
					cri.fieldName = cri.fieldName.slice(0, cri.fieldName.lastIndexOf("_"));
					if ($scope.isStringCriteria(cri)) {
						cri.fieldName = cri.field + "_t";
					} else if ($scope.isDateCriteria(cri)) {
						cri.date = new Date();
						cri.dateOpened = false;
						cri.openDate = function() {
							cri.dateOpened = true;
						}
						cri.value = cri.date.getTime();
						cri.fieldName = cri.field + "_tdt";
					} else if ($scope.isNumberCriteria(cri)) {
						cri.fieldName = cri.field + "_ti";
					} else {
						cri.fieldName = cri.field + "_t";
					}
				} else {
					if ($scope.isDateCriteria(cri)) {
						cri.date = new Date();
						cri.value = cri.date.getTime();
						cri.dateOpened = false;
						cri.openDate = function() {
							cri.dateOpened = true;
						}
					}
				}
			}

			$scope.updateDateCriteria = function(cri) {
				if (cri.date) {
					cri.value = cri.date.getTime();
				}
			}

			$scope.updateMetaField = function(cri) {
				if (cri.field) {
					if ($scope.isStringCriteria(cri)) {
						cri.fieldName = cri.field + "_t";
					} else if ($scope.isDateCriteria(cri)) {
						cri.fieldName = cri.field + "_tdt";
					} else if ($scope.isNumberCriteria(cri)) {
						cri.fieldName = cri.field + "_ti";
					} else {
						cri.fieldName = cri.field + "_t";
					}
				} else {
					cri.fieldName = null;
				}
			}

			$scope.changeMetadataField = function(cri, meta) {
				cri.fieldName = meta.value;
				cri.fieldCode = meta.code;
				if (cri.fieldName.lastIndexOf("_") > -1) {
					cri.field = cri.fieldName.slice(0, cri.fieldName.lastIndexOf("_"));
				} else {
					cri.field = cri.fieldName;
				}

				var codeLength = cri.fieldCode.length;
				if (cri.fieldCode.slice(codeLength - 4, codeLength) === "_tdt") {
					cri.matchingCondition = "DATE_EQUALS";
					cri.date = new Date();
					cri.dateOpened = false;
					cri.openDate = function() {
						cri.dateOpened = true;
					}
					cri.value = cri.date.getTime();

				} else if (cri.fieldCode.slice(codeLength - 3, codeLength) === "_ti") {
					cri.matchingCondition = "NUM_EQUALS";
					cri.value = null;
				} else {
					cri.matchingCondition = "CONTAINS";
					cri.value = null;
				}
			}

			$scope.resetMetaMatchingCondition = function(cri) {
				cri.fieldCode = undefined;
			}

			$scope.hideMetaMatchingCondition = function(cri, condition) {
				if (!cri.fieldCode) {
					return false;
				}
				var codeLength = cri.fieldCode.length;

				if (generalService.stringStartWith(condition, 'DATE')) {
					if (cri.fieldCode.slice(codeLength - 4, codeLength) === "_tdt") {
						return false;
					}
				} else if (generalService.stringStartWith(condition, "NUM")) {
					if (cri.fieldCode.slice(codeLength - 3, codeLength) === "_ti") {
						return false;
					}
				} else {
					if (cri.fieldCode.slice(codeLength - 2, codeLength) === "_t") {
						return false;
					}
				}

				return true;
			}

			$scope.isMetaData = function(cri, cg) {
				if (cri.dataSection === 'M') {
					cri.isMetaData = true;
					if (cri.fieldName && !cri.field) {
						if (cri.fieldDisplayName) {
							cri.field = cri.fieldDisplayName;
							cri.fieldCode = cri.fieldName;
							cri.fieldName = cri.fieldDisplayName;
						} else {
							cri.field = cri.fieldName;
						}
						if (cri.field.lastIndexOf("_") > -1) {
							cri.field = cri.field.slice(0, cri.field.lastIndexOf("_"));
						}
					}
					return true;
				} else {
					cri.isMetaData = false;
					return false;
				}
			}

			$scope.hasMetaData = function(cg) {
				for (var i = 0; i < cg.criterias.length; i++) {
					if (cg.criterias[i].isMetaData) {
						return true;
					}
				}
				return false;
			}

			$scope.isDateCriteria = function(cri) {
				var isDate = (generalService.stringStartWith(cri.matchingCondition, 'DATE'));
				if (isDate) {
					cri.openDate = function() {
						cri.dateOpened = true;
					}
					if (!cri.date) {
						cri.dateOpened = false;
						if (cri.value) {
							cri.date = new Date(Number(cri.value));
						} else {
							cri.date = new Date();
							cri.value = cri.date.getTime();
						}
					}
				}
				return isDate;
			}

			$scope.isNumberCriteria = function(cri) {
				return (generalService.stringStartWith(cri.matchingCondition, 'NUM'));
			}

			$scope.isStringCriteria = function(cri) {
				return (cri.matchingCondition === 'NOT' || cri.matchingCondition === 'NOT_CONTAINS' || cri.matchingCondition === 'MUST_CONTAINS' || cri.matchingCondition === 'CONTAINS');
			}

			$scope.checkDataProvider = function(value, viewValue) {
				loggerService.getLogger().debug(value + " " + viewValue);
				if (value && viewValue) {
					return generalService.stringStartWith(value, viewValue);
				} else {
					return false;
				}
			}

			$scope.changeDataProvider = function(cri, dp) {
				cri.value = dp.suggestion;
			}

			// go back to list
			$scope.backToRule = function() {
				$state.go('ruleDetails', {
					id : $scope.ruleID
				});
			}

			$scope.scrollTo = function(target) {
				$location.hash(target);
				$anchorScroll();
				/* $location.hash('resourceInfo', ''); */
				currentTarget = target;
			}

			$scope.querySolr = function(form) {
				// to be implemented

				if (form.$invalid) {
					form.$setDirty();
					for ( var field in form) {
						if (field[0] == '$')
							continue;
						form[field].$touched = true;
						form[field].$dirty = true;
					}
					return;
				}

				// process directories
				angular.forEach($scope.query.directories, function(group, index) {
					angular.forEach(group.criterias, function(dir, index) {
						$scope.checkDirectory(dir);
					});
				});

				sharedService.data.query = angular.copy($scope.query);
				$scope.executeSolrQuery();
			}

			// directories function
			$scope.addDirectory = function() {
				if (!$scope.query) {
					$scope.query = {};
				}
				if (!$scope.query.directories || $scope.query.directories.length === 0) {
					$scope.query.directories = [{
						"operator" : "AND",
						"criterias" : [{
							"dataSection" : "D",
							"matchingCondition" : "CONTAINS",
							"value" : ""
						}]
					}];
				} else if (!$scope.query.directories[0].criterias || $scope.query.directories[0].criterias.length == 0) {
					$scope.query.directories[0].criterias = [{
						"dataSection" : "D",
						"matchingCondition" : "CONTAINS",
						"value" : ""
					}]
				} else {
					$scope.query.directories[0].criterias.push({
						"dataSection" : "D",
						"matchingCondition" : "CONTAINS",
						"value" : ""
					})
				}
			}

			$scope.checkDirectory = function(dir) {

				if (!dir.value) {
					return;
				}
				if (dir.value.slice(dir.value.length - 2, dir.value.length) != ("\\*")
						&& (dir.value.slice(dir.value.length - 1, dir.value.length) != ("\\") && dir.value.slice(dir.value.length - 1, dir.value.length) != ("/"))
						&& dir.value.slice(dir.value.length - 2, dir.value.length) != ("/*")) {
					dir.value += "\\";
				}
			}

			$scope.removeDirectory = function(index) {
				$scope.query.directories[0].criterias.splice(index, 1);
			}

			$scope.executeSolrQuery = function() {

				$scope.resultList = [];
				$scope.total = 0;
				$scope.resultPageNumber = 1;

				indexDatabaseQueryService.getSortFields(function(response) {
					$scope.sortByFields = response.data;
					loggerService.getLogger().debug(response);
					loggerService.getLogger().debug("Sort fields from service " + $scope.sortByFields);

					if (!$scope.sortByFields) {
						$scope.sortByFields = [{
							"code" : "modifiedOn",
							"value" : "Last Updated"
						}];
					}
					$scope.sortBy = $scope.sortByFields[0];
					var sortFields = [{
						"field" : $scope.sortBy.code,
						"order" : $scope.sortOrder.value
					}];

					indexDatabaseQueryService.executeQuery($scope.query, $scope.resultPageNumber, sortFields, function(response) {
						$scope.resultList = response.data;
						$scope.total = response.totalNoOfRecords;
						sharedService.data.solrResult = angular.copy($scope.resultList);
						sharedService.data.solrTotal = angular.copy($scope.total);
						sharedService.data.sortByFields = angular.copy($scope.sortByFields);
						$state.go("indexDatabaseQueryResult", {
							id : $scope.ruleID
						});
					});
				})
			}

		}]);mainApp.controller('indexDatabaseQueryResultController', ['$scope', 'loggerService', '$filter', '$stateParams', 'generalService', 'configService', '$state', "sharedService",
		'indexDatabaseQueryService', function($scope, loggerService, $filter, $stateParams, generalService, configService, $state, sharedService, indexDatabaseQueryService) {
			$scope.$parent.isDetailsPage = true;
			$scope.ruleID = $stateParams.id;

			$scope.sortOrders = configService.getSortOrders();
			$scope.sortOrder = $scope.sortOrders[0];

			$scope.executeSolrQuery = function(sortFields) {

				$scope.resultList = [];
				$scope.total = 0;
				$scope.resultPageNumber = 1;
				$scope.totalSortFields = 0;

				if (!sortFields) {
					indexDatabaseQueryService.getSortFields(function(response) {
						$scope.sortByFields = response.data;
						loggerService.getLogger().debug(JSON.stringify(response.data));
						loggerService.getLogger().info("Sort fields from service " + $scope.sortByFields);

						if (!$scope.sortByFields) {
							$scope.sortByFields = [{
								"code" : "modifiedOn",
								"value" : "Last Updated"
							}];
						}
						$scope.sortBy = $scope.sortByFields[0];
						var sortFields = [{
							"field" : $scope.sortBy.code,
							"order" : $scope.sortOrder.value
						}];

						indexDatabaseQueryService.executeQuery($scope.query, $scope.resultPageNumber, sortFields, function(response) {
							$scope.resultList = response.data;
							$scope.total = response.totalNoOfRecords;
							loggerService.getLogger().debug(response);
						});
					})
				} else {
					indexDatabaseQueryService.executeQuery($scope.query, $scope.resultPageNumber, sortFields, function(response) {
						$scope.resultList = response.data;
						$scope.total = response.totalNoOfRecords;
						loggerService.getLogger().debug(JSON.stringify(response));
					});
				}
			}

			if (sharedService.data.query) {
				$scope.query = angular.copy(sharedService.data.query);
				if (sharedService.data.solrResult && sharedService.data.solrTotal && sharedService.data.sortByFields) {
					$scope.resultList = angular.copy(sharedService.data.solrResult);
					$scope.total = angular.copy(sharedService.data.solrTotal);
					$scope.sortByFields = angular.copy(sharedService.data.sortByFields);
					$scope.sortBy = $scope.sortByFields[0];
					$scope.resultPageNumber = 1;
				} else {
					$scope.executeSolrQuery();
				}
			} else {
				$state.go("indexDatabaseQuery", {
					id : 'custom'
				});
			}

			$scope.sortByField = function(sortBy) {

				var sortFields = [{
					"field" : sortBy.code,
					"order" : $scope.sortOrder.value
				}];
				$scope.sortBy = sortBy;

				$scope.executeSolrQuery(sortFields);
			}

			$scope.sortByOrder = function(sortOrder) {
				var sortFields = [{
					"field" : $scope.sortBy.code,
					"order" : sortOrder.value
				}];
				$scope.sortOrder = sortOrder

				$scope.executeSolrQuery(sortFields);
			}

			$scope.loadMore = function() {
				var sortFields = [{
					"field" : $scope.sortBy.code,
					"order" : $scope.sortOrder.value
				}];
				$scope.resultPageNumber++;
				indexDatabaseQueryService.executeQuery($scope.query, $scope.resultPageNumber, sortFields, function(response) {
					$scope.resultList = $scope.resultList.concat(response.data);
					$scope.total = response.totalNoOfRecords;
					loggerService.getLogger().debug(JSON.stringify(response));
				});
			}

			$scope.editQuery = function() {
				$state.go("indexDatabaseQuery", {
					id : $scope.ruleID
				})
			}

			$scope.isDateCriteria = function(cri) {
				var isDate = (generalService.stringStartWith(cri.matchingCondition, 'DATE'));
				return isDate;
			}

		}]);mainApp.factory('indexDatabaseQueryService', ['networkService', 'loggerService', 'configService', '$filter', 'statusCodeService', function(networkService, loggerService, configService, $filter, statusCodeService) {

	var PAGE_SIZE = configService.configObject['defaultIDBResultPageSize'];

	var executeQuery = function(query, pageNo, sortFields, callback) {
		loggerService.getLogger().info("Executing index database query");

		var requestData = {
			'criteria' : query.criteria,
			'directories' : query.directories,
			'sortFields' : sortFields,
			'pageNo' : pageNo,
			'pageSize' : PAGE_SIZE
		};

		loggerService.getLogger().debug("The request date is = " + JSON.stringify(requestData));

		networkService.post(configService.getUrl("solr.query"), requestData, function(data) {
			statusCodeService.list("solr query", callback, data);
		});

		// statusCodeService.list("sol query", callback,
		// executeQueryOffline());
	}

	var executeQueryOffline = function() {
		return {
			"data" : [{
				"id" : "//SCDEV02W12R2/MySharedFolder/Classified/confidential classified.doc",
				"directory" : "//SCDEV02W12R2/MySharedFolder/Classified/",
				"documentName" : "confidential classified.doc",
				"author" : "Micheal Dell",
				"createdOn" : 1458017853860,
				"modifiedOn" : 1458017853860
			}, {
				"id" : "//SCDEV02W12R2/MySharedFolder/Classified/confidential classified.docx",
				"directory" : "//SCDEV02W12R2/MySharedFolder/Classified/",
				"documentName" : "confidential classified.docx",
				"author" : "Micheal Dell",
				"createdOn" : 1458017853860,
				"modifiedOn" : 1458017853860
			}, {
				"id" : "//SCDEV02W12R2/MySharedFolder/confidential classified.doc",
				"directory" : "//SCDEV02W12R2/MySharedFolder/",
				"documentName" : "confidential classified.doc",
				"author" : "Jimmy Choo",
				"createdOn" : 1458017853860,
				"modifiedOn" : 1458017853860
			}, {
				"id" : "//SCDEV01W12R2/MySharedFolder/Four.msg",
				"directory" : "//SCDEV01W12R2/MySharedFolder/",
				"documentName" : "Four.msg",
				"author" : "Jimmy Choo",
				"createdOn" : 1458017853860,
				"modifiedOn" : 1458017853860
			}, {
				"id" : "//SCDEV01W12R2/MySharedFolder/Day 01-NextLabs IRM _030612.pptx",
				"directory" : "//SCDEV01W12R2/MySharedFolder/",
				"documentName" : "Day 01-NextLabs IRM _030612.pptx",
				"author" : "Jimmy Choo",
				"createdOn" : 1458017853860,
				"modifiedOn" : 1458017853860
			}],
			"pageNo" : 1,
			"pageSize" : 5,
			"totalNoOfRecords" : 6,
			"statusCode" : "1004",
			"message" : "Data loaded successfully."
		}
	}

	var getSortFields = function(callback) {
		// temporarily get sort field of rule
		networkService.get(configService.getUrl("solr.sortFields"), function(data) {
			statusCodeService.list("idq sort fields", callback, data);
		});
	}

	return {
		executeQuery : executeQuery,
		getSortFields : getSortFields
	}

}]);;mainApp.controller('overviewController', ['$scope', '$state', 'loggerService', '$stateParams', '$filter', 'dialogService', 'summaryService',
		function($scope, $state, loggerService, $stateParams, $filter, dialogService, summaryService) {

			$scope.$parent.isDetailsPage = false;
			$scope.serviceLabels = [$filter('translate')('dashboard.service.healthy'), '', $filter('translate')('dashboard.service.critical')];
			$scope.processLabels = [$filter('translate')('dashboard.process.success'), $filter('translate')('dashboard.process.fail')]

			$scope.getDashboardInfo = function() {

				summaryService.getSummary("document", function(response) {
					$scope.documentSummary = response.data;
					$scope.loadLicenseInfo();
				});

				summaryService.getSummary("watcher", function(response) {
					$scope.watcherSummary = response.data;
					$scope.criticalHeartbeat = response.criticalHeartBeat;
					$scope.loadWatcherInfo();
				});

				summaryService.getSummary("extractor", function(response) {
					$scope.extractorSummary = response.data;
					$scope.loadExtractorInfo();
				});

				summaryService.getSummary("ruleEngine", function(response) {
					$scope.ruleEngineSummary = response.data;
					$scope.loadRuleEngineInfo();
				});
			}

			$scope.getDashboardInfo();

			$scope.refresh = function() {
				$scope.getDashboardInfo();
			}

			$scope.loadLicenseInfo = function() {

				for (var i = 0; i < $scope.documentSummary.length; i++) {
					if ($scope.documentSummary[i].value) {
						if ($scope.documentSummary[i].code == "Data size") {
							$scope.dataSize = Number($scope.documentSummary[i].value);
							continue;
						}
						if ($scope.documentSummary[i].code == "Used size") {
							$scope.usedSize = Number($scope.documentSummary[i].value) / 1024 / 1024 / 1024;
							$scope.usedSize = $scope.usedSize.toFixed(2);

							continue;
						}
						if ($scope.documentSummary[i].code == "Total document") {
							$scope.totalDocs = Number($scope.documentSummary[i].value);
							// $scope.totalDocs = 200000;
							continue;
						}
						if ($scope.documentSummary[i].code == "Success extraction") {
							$scope.successExtraction = Number($scope.documentSummary[i].value);
							// $scope.successExtraction = 900;
							continue;
						}
						if ($scope.documentSummary[i].code == "Fail extraction") {
							$scope.failExtraction = Number($scope.documentSummary[i].value);
							// $scope.failExtraction = 100;
							continue;
						}
					}
				}

				$scope.licenseFound = true;
				if ($scope.dataSize == undefined || $scope.usedSize == undefined) {
					$scope.licenseFound = false;
				}

				$scope.processDetailsFound = true;
				if ($scope.totalDocs == undefined || $scope.totalDocs == 0 || $scope.successExtraction == undefined || $scope.failExtraction == undefined) {
					$scope.processDetailsFound = false;
				} else {
					var percentSuccess = Math.round($scope.successExtraction / ($scope.successExtraction + $scope.failExtraction) * 100);
					var percentFailed = 100 - percentSuccess
					$scope.processDetails = [percentSuccess, percentFailed];
				}
			}

			$scope.loadWatcherInfo = function() {
				$scope.watcherInfo = {};

				for (var i = 0; i < $scope.watcherSummary.length; i++) {
					if ($scope.watcherSummary[i].value) {
						if ($scope.watcherSummary[i].code == "Total") {
							$scope.watcherInfo.total = $scope.watcherSummary[i].value;
							continue;
						}
						if ($scope.watcherSummary[i].code == "Healthy") {
							$scope.watcherInfo.healthy = $scope.watcherSummary[i].value;
							continue;
						}
						if ($scope.watcherSummary[i].code == "Warning") {
							$scope.watcherInfo.warning = $scope.watcherSummary[i].value;
							continue;
						}
						if ($scope.watcherSummary[i].code == "Critical") {
							$scope.watcherInfo.critical = $scope.watcherSummary[i].value;
							continue;
						}
					} else {
						$scope.watcherInfo.missing = true;
					}
				}

				if ($scope.watcherInfo.total == 0) {
					$scope.watcherInfo.missing = true;
				}

				$scope.watcherData = [Number($scope.watcherInfo.healthy), 0, Number($scope.watcherInfo.critical)];
			}

			$scope.loadExtractorInfo = function() {
				$scope.extractorInfo = {};
				for (var i = 0; i < $scope.extractorSummary.length; i++) {
					if ($scope.extractorSummary[i].value) {
						if ($scope.extractorSummary[i].code == "Total") {
							$scope.extractorInfo.total = $scope.extractorSummary[i].value;
							continue;
						}
						if ($scope.extractorSummary[i].code == "Healthy") {
							$scope.extractorInfo.healthy = $scope.extractorSummary[i].value;
							continue;
						}
						if ($scope.extractorSummary[i].code == "Warning") {
							$scope.extractorInfo.warning = $scope.extractorSummary[i].value;
							continue;
						}
						if ($scope.extractorSummary[i].code == "Critical") {
							$scope.extractorInfo.critical = $scope.extractorSummary[i].value;
							continue;
						}
					} else {
						$scope.extractorInfo.missing = true;
					}
				}

				if ($scope.extractorInfo.total == 0) {
					$scope.extractorInfo.missing = true;
				}

				$scope.extractorData = [Number($scope.extractorInfo.healthy), 0, Number($scope.extractorInfo.critical)];
			}

			$scope.loadRuleEngineInfo = function() {
				$scope.ruleEngineInfo = {};
				for (var i = 0; i < $scope.ruleEngineSummary.length; i++) {
					if ($scope.ruleEngineSummary[i].value) {
						if ($scope.ruleEngineSummary[i].code == "Total") {
							$scope.ruleEngineInfo.total = $scope.ruleEngineSummary[i].value;
							continue;
						}
						if ($scope.ruleEngineSummary[i].code == "Healthy") {
							$scope.ruleEngineInfo.healthy = $scope.ruleEngineSummary[i].value;
							continue;
						}
						if ($scope.ruleEngineSummary[i].code == "Warning") {
							$scope.ruleEngineInfo.warning = $scope.ruleEngineSummary[i].value;
							continue;
						}
						if ($scope.ruleEngineSummary[i].code == "Critical") {
							$scope.ruleEngineInfo.critical = $scope.ruleEngineSummary[i].value;
							continue;
						}
					} else {
						$scope.ruleEngineInfo.missing = true;
					}
				}

				if ($scope.ruleEngineInfo.total == 0) {
					$scope.ruleEngineInfo.missing = true;
				}

				$scope.ruleEngineData = [Number($scope.ruleEngineInfo.healthy), 0, Number($scope.ruleEngineInfo.critical)];
			}

			$scope.goToService = function(type) {
				$state.go('scservices', {
					type : type
				});
			}

			$scope.getUsedSizeStyle = function() {

				if ($scope.usedSize / $scope.dataSize < 0.5) {
					return "";
				}

				if ($scope.usedSize / $scope.dataSize < 0.75) {
					return "";
				}

				if ($scope.usedSize / $scope.dataSize <= 1) {
					return "";
				}

				if ($scope.usedSize / $scope.dataSize > 1) {
					return "danger";
				}

			}

			$scope.getRemaining = function() {
				return ($scope.dataSize - $scope.usedSize).toFixed(2);
			}

		}]);mainApp.controller('ruleDetailsController', [
		'$scope',
		'$location',
		'loggerService',
		'$filter',
		'$stateParams',
		'sharedService',
		'generalService',
		'dialogService',
		'ruleService',
		'collectionService',
		'$state',
		'$anchorScroll',
		function($scope, $location, loggerService, $filter, $stateParams, sharedService, generalService, dialogService, ruleService, collectionService, $state, $anchorScroll) {
			$scope.$parent.isDetailsPage = true;
			$scope.ruleID = $stateParams.id;

			loggerService.getLogger().info("Rule id is " + $scope.ruleID);

			$scope.validity = {};

			// validity variables
			$scope.validFromPopUp = {
				opened : false
			};
			$scope.expiringOnPopUp = {
				opened : false
			}

			$scope.validFromOpen = function() {
				$scope.validFromPopUp.opened = true;
			}

			$scope.expiringOnOpen = function() {
				$scope.expiringOnPopUp.opened = true;
			}

			// schedule variables
			$scope.dayOfTheWeek = generalService.getDayOfTheWeek();
			$scope.dayOfTheMonth = generalService.getDayOfTheMonth();

			// criteria variables
			ruleService.getMatchingConditions(function(data) {
				$scope.matchingConditions = data;
			});
			ruleService.getMetaDataMatchingConditions(function(data) {
				$scope.metaDataMatchingConditions = data
			});

			ruleService.getDataProviders(function(data) {
				$scope.dataProviders = data;
			});
			$scope.dataSections = ruleService.getDataSections();
			ruleService.getMetaDataList(function(data) {
				$scope.metaDataList = data;
			});

			// action variables
			$scope.actionCollapse = {};
			$scope.selectActionDropDownBtn = $filter('translate')('rule.editor.select.action.dropdown');

			// initialize service
			$scope.reloadRule = function() {
				ruleService.getRule($scope.ruleID, function(response) {
					$scope.rule = response.data;
					loggerService.getLogger().debug($scope.rule);

					// process validity
					$scope.validity.validFrom = new Date($scope.rule.effectiveFrom);
					if ($scope.rule.effectiveUntil === 0) {
						$scope.validity.expiringOnOption = "never";
						$scope.validity.expiringOn = new Date();
					} else {
						$scope.validity.expiringOnOption = "specific";
						$scope.validity.expiringOn = new Date($scope.rule.effectiveUntil);
					}

					// process schedule
					$scope.loadSchedule();

					// process criteras
					if ($scope.rule.criteriaGroups) {
						$scope.loadCriterias();
					}

					// copy initial data to
					// reset object
					$scope.copyResetObjects();

					if (!$scope.rule) {
						$scope.detailsFound = false;
					} else {
						$scope.detailsFound = true;
					}

					loggerService.getLogger().debug($scope.rule);
				})
			}

			$scope.copyResetObjects = function() {
				$scope.resetRule = angular.copy($scope.rule);
				$scope.resetWeeklySchedules = angular.copy($scope.weeklySchedules);
				$scope.resetDailySchedules = angular.copy($scope.dailySchedules);
				$scope.resetMonthlySchedules = angular.copy($scope.monthlySchedules);
				$scope.resetValidity = angular.copy($scope.validity);
			}

			// load schedule variables from object loaded from
			// web service
			$scope.loadSchedule = function() {
				if ($scope.rule.executionFrequency) {
					var date = new Date();
					date.setHours($scope.rule.executionFrequency.time.slice(0, 2));
					date.setMinutes($scope.rule.executionFrequency.time.slice(2, 4));
					if ($scope.rule.scheduleType === "D") {
						$scope.dailySchedules = [{
							time : date
						}];

						$scope.initializeWeeklyTimeSlot();
						$scope.initializeMonthlyTimeSlot();
					} else if ($scope.rule.scheduleType === "W") {
						var days = {
							"sun" : false,
							"mon" : false,
							"tue" : false,
							"wed" : false,
							"thu" : false,
							"fri" : false,
							"sat" : false
						};

						angular.forEach($scope.rule.executionFrequency.dayOfWeek, function(day, index) {
							loggerService.getLogger().debug(generalService.getDayOfTheWeekMap()[day]);
							days[generalService.getDayOfTheWeekMap()[day]] = true;
						});

						$scope.weeklySchedules = [{
							time : date,
							days : days
						}];

						$scope.initializeDailyTimeSlot();
						$scope.initializeMonthlyTimeSlot();
					} else {
						var days = {};
						for (var i = 1; i < 31; i++) {
							days[i] = false;
						}
						days['L'] = false;
						angular.forEach($scope.rule.executionFrequency.dayOfMonth, function(day, index) {
							days[day] = true;
						});
						$scope.monthlySchedules = [{
							time : date,
							days : days
						}]

						$scope.initializeDailyTimeSlot();
						$scope.initializeWeeklyTimeSlot();
					}
				} else {
					$scope.rule.executionFrequency = {};
					$scope.initializeDailyTimeSlot();
					$scope.initializeWeeklyTimeSlot();
					$scope.initializeMonthlyTimeSlot();
				}
			}

			// initialize an array with one default element for
			// weekly timeslot
			$scope.initializeWeeklyTimeSlot = function() {
				var time = new Date();
				time.setHours(0);
				time.setMinutes(0);
				$scope.weeklySchedules = [{
					days : {
						"sun" : false,
						"mon" : false,
						"tue" : false,
						"wed" : false,
						"thu" : false,
						"fri" : false,
						"sat" : false,
					},
					time : time
				}]
			}

			// initialize an array with one default element for
			// daily timeslot
			$scope.initializeDailyTimeSlot = function() {
				var time = new Date();
				time.setHours(0);
				time.setMinutes(0);
				$scope.dailySchedules = [{
					time : time,
				}]
			}

			// initialize an array with one default element for
			// monthly timeslot
			$scope.initializeMonthlyTimeSlot = function() {
				var time = new Date();
				time.setHours(0);
				time.setMinutes(0);
				var days = {};
				for (var i = 1; i < 31; i++) {
					days[i + ""] = false;
				}
				days['L'] = false;
				$scope.monthlySchedules = [{
					days : days,
					time : time
				}]
			}

			$scope.selectAll = function(monthlySchedule) {
				angular.forEach(monthlySchedule.days, function(value, key) {
					if (key != 'L') {
						monthlySchedule.days[key] = true;
					}
				});
			}

			$scope.clearAll = function(monthlySchedule) {
				angular.forEach(monthlySchedule.days, function(value, key) {
					monthlySchedule.days[key] = false;
				});
			}

			$scope.getDayOfMonthString = function(days) {
				var returnedString = "";
				var object = [];
				angular.forEach(days, function(value, day) {

					if (value) {
						if (day === 'L') {
							object.push($filter('translate')('L'));
						} else {
							object.push(day);
						}
					} else {
						if (object.length > 2) {
							returnedString += object[0] + "-" + object[object.length - 1] + ", ";
						} else {
							for (var i = 0; i < object.length; i++) {
								returnedString += object[i] + ", ";
							}
						}
						object.length = 0;
					}
				});
				if (object.length > 0) {
					if (object.length > 2) {
						returnedString += object[0] + "-" + object[object.length - 1] + ", ";
					} else {
						for (var i = 0; i < object.length; i++) {
							returnedString += object[i] + ", ";
						}
					}
				}
				if (returnedString.length === 0) {
					returnedString = $filter('translate')('month.days.alt');
				} else {
					returnedString = returnedString.slice(0, returnedString.length - 2);
				}
				return returnedString;
			}

			// get daily or weekly or monthly schedule as text
			$scope.getScheduleAsText = function() {
				var returnedString = ""
				if ($scope.rule.scheduleType === 'D') {
					returnedString += $filter('translate')('daily.label') + " " + $filter('translate')('at.label') + " ";
					angular.forEach($scope.dailySchedules, function(slot, index) {
						if (index != 0) {
							returnedString += " " + $filter('translate')('and.label') + " ";
						}

						returnedString += $scope.parseTimeToString(slot.time, true);
					});
				} else if ($scope.rule.scheduleType === 'W') {
					returnedString += $filter('translate')('weekly.label') + " " + $filter('translate')('on.label') + " ";
					angular.forEach($scope.weeklySchedules, function(slot, index) {
						if (index != 0) {
							returnedString += " " + $filter('translate')('and.label') + " ";
						}

						var hasDay = false;
						var dayString = "";
						angular.forEach(slot.days, function(value, key) {
							if (value) {
								hasDay = true;
								dayString += $filter('translate')(key + ".label") + " ";
							}
						});
						if (!hasDay) {
							returnedString += "<" + $filter('translate')('week.days.alt') + ">";
						} else {
							returnedString += "(" + dayString.slice(0, dayString.length - 1) + ")";
						}
						returnedString += " " + $filter('translate')('at.label') + " ";
						returnedString += $scope.parseTimeToString(slot.time, true);
					})
				} else {
					returnedString += $filter('translate')('monthly.label') + " " + $filter('translate')('on.label') + " ";
					angular.forEach($scope.monthlySchedules, function(slot, index) {
						if (index != 0) {
							returnedString += " " + $filter('translate')('and.label') + " ";
						}

						var dayString = $scope.getDayOfMonthString(slot.days);
						if (dayString.length === 0) {
							returnedString += "<" + $filter('translate')('month.days.alt') + ">";
						} else {
							returnedString += "(" + dayString + ")";
						}
						returnedString += " " + $filter('translate')('at.label') + " ";
						returnedString += $scope.parseTimeToString(slot.time, true);
					})
				}
				return returnedString;
			}

			$scope.monthlyScheduleChange = function(monthlySchedule, day, value) {
				loggerService.getLogger().debug(day + " " + value);
				if (day == 'L' && value) {
					for (var i = 1; i < 31; i++) {
						monthlySchedule.days[i] = false;
					}
				}

				if (day != 'L' && value) {
					monthlySchedule.days['L'] = false;
				}
			}

			if ($scope.ruleID === "create") {
				// if creating rule, initialize
				// default values
				$scope.rule = {
					"name" : null,
					"scheduleType" : "D",
					"displayOrder" : 1
				}
				$scope.validity.validFrom = new Date();
				$scope.validity.expiringOn = new Date();
				$scope.validity.expiringOnOption = "never";
				$scope.initializeWeeklyTimeSlot();
				$scope.initializeDailyTimeSlot();
				$scope.initializeMonthlyTimeSlot();
				$scope.detailsFound = true;
				$scope.resetrule = angular.copy($scope.rule);
				$scope.isCreated = true;
			} else {
				// get from web service
				$scope.reloadRule();
				$scope.isCreated = false;

			}

			$scope.loadCriterias = function() {
			}

			// add criteria groups
			$scope.addCriteriaGroup = function() {
				if (!$scope.rule.criteriaGroups) {
					$scope.rule.criteriaGroups = [];
				}

				$scope.rule.criteriaGroups.push({
					"criterias" : [{
						"displayOrder" : 1,
						"dataSection" : "A",
						"fieldName" : "",
						"matchingCondition" : "CONTAINS",
						"value" : null,
						"newCri" : true
					}],
					"displayOrder" : $scope.rule.criteriaGroups.length + 1,
					"operator" : "AND"
				})
			}

			// add criteria
			$scope.addCriteria = function(cg) {
				if (!cg.criterias) {
					cg.criterias = [];
				}

				cg.criterias.push({
					"displayOrder" : cg.criterias.length + 1,
					"dataSection" : "A",
					"fieldName" : "",
					"matchingCondition" : "CONTAINS",
					"value" : null,
					"newCri" : true
				});
			}

			// remove criteria group
			$scope.removeCriteriaGroup = function(index) {
				$scope.rule.criteriaGroups.splice(index, 1);
			}

			// remove criteria
			$scope.removeCriteria = function(cg, index, cindex) {
				cg.criterias.splice(cindex, 1);
				if (cg.criterias.length === 0) {
					$scope.rule.criteriaGroups.splice(index, 1);
				}
			}

			$scope.removeCriteriaGroup = function(index) {
				$scope.rule.criteriaGroups.splice(index, 1);
			}

			$scope.changeDataSection = function(cri, section) {
				cri.dataSection = section;
				cri.matchingCondition = "CONTAINS";
				cri.value = null;
				if (section !== 'M') {
					cri.fieldName = "";
					cri.field = "";
				}
			}

			$scope.changeMatchingCondition = function(cri, condition) {
				cri.matchingCondition = condition.code;
				cri.value = null;
			}

			$scope.changeMetaMatchingCondition = function(cri, condition) {
				cri.matchingCondition = condition.code;
				cri.value = null;
				if (cri.fieldName && cri.fieldName.lastIndexOf('_') > -1) {
					cri.fieldName = cri.fieldName.slice(0, cri.fieldName.lastIndexOf("_"));
					if ($scope.isStringCriteria(cri)) {
						cri.fieldName = cri.field + "_t";
					} else if ($scope.isDateCriteria(cri)) {
						cri.fieldName = cri.field + "_tdt";
						cri.date = new Date();
						cri.value = cri.date.getTime();
						cri.dateOpened = false;
						cri.openDate = function() {
							cri.dateOpened = true;
						}
					} else if ($scope.isNumberCriteria(cri)) {
						cri.fieldName = cri.field + "_ti";
					} else {
						cri.fieldName = cri.field + "_t";
					}
				} else {
					if ($scope.isDateCriteria(cri)) {
						cri.date = new Date();
						cri.value = cri.date.getTime();
						cri.dateOpened = false;
						cri.openDate = function() {
							cri.dateOpened = true;
						}
					}
				}
			}

			$scope.updateDateCriteria = function(cri) {
				if (cri.date) {
					cri.value = cri.date.getTime();
				}
			}

			$scope.updateMetaField = function(cri) {
				if (cri.field) {
					if ($scope.isStringCriteria(cri)) {
						cri.fieldName = cri.field + "_t";
					} else if ($scope.isDateCriteria(cri)) {
						cri.fieldName = cri.field + "_tdt";
					} else if ($scope.isNumberCriteria(cri)) {
						cri.fieldName = cri.field + "_ti";
					} else {
						cri.fieldName = cri.field + "_t";
					}
				} else {
					cri.fieldName = null;
				}
			}

			$scope.changeMetadataField = function(cri, meta) {
				cri.fieldName = meta.value;
				cri.fieldCode = meta.code;
				if (cri.fieldName.lastIndexOf("_") > -1) {
					cri.field = cri.fieldName.slice(0, cri.fieldName.lastIndexOf("_"));
				} else {
					cri.field = cri.fieldName;
				}

				var codeLength = cri.fieldCode.length;
				if (cri.fieldCode.slice(codeLength - 4, codeLength) === "_tdt") {
					cri.matchingCondition = "DATE_EQUALS";
					cri.date = new Date();
					cri.value = cri.date.getTime();
					cri.dateOpened = false;
					cri.openDate = function() {
						cri.dateOpened = true;
					}

				} else if (cri.fieldCode.slice(codeLength - 3, codeLength) === "_ti") {
					cri.matchingCondition = "NUM_EQUALS";
					cri.value = null;
				} else {
					cri.matchingCondition = "CONTAINS";
					cri.value = null;
				}
			}

			$scope.resetMetaMatchingCondition = function(cri) {
				cri.fieldCode = undefined;
			}

			$scope.hideMetaMatchingCondition = function(cri, condition) {
				if (!cri.fieldCode) {
					return false;
				}
				var codeLength = cri.fieldCode.length;

				if (generalService.stringStartWith(condition, 'DATE')) {
					if (cri.fieldCode.slice(codeLength - 4, codeLength) === "_tdt") {
						return false;
					}
				} else if (generalService.stringStartWith(condition, "NUM")) {
					if (cri.fieldCode.slice(codeLength - 3, codeLength) === "_ti") {
						return false;
					}
				} else {
					if (cri.fieldCode.slice(codeLength - 2, codeLength) === "_t") {
						return false;
					}
				}

				return true;
			}

			$scope.isMetaData = function(cri, cg) {
				var result;
				if (cri.dataSection === 'M') {
					cri.isMetaData = true;
					if (cri.fieldName && !cri.field) {
						if (cri.fieldDisplayName) {
							cri.field = cri.fieldDisplayName;
							cri.fieldCode = cri.fieldName;
							cri.fieldName = cri.fieldDisplayName;

						} else {
							cri.field = cri.fieldName;
						}
						if (cri.field.lastIndexOf("_") > -1) {
							cri.field = cri.field.slice(0, cri.field.lastIndexOf("_"));
						}
					}
					result = true;
				} else {
					cri.isMetaData = false;
					result = false;
				}

				if (!cri.metaLoaded && !cri.newCri) {
					cri.metaLoaded = true;
					$scope.resetRule = angular.copy($scope.rule);
				}

				return result;
			}

			$scope.hasMetaData = function(cg) {
				for (var i = 0; i < cg.criterias.length; i++) {
					if (cg.criterias[i].isMetaData) {
						return true;
					}
				}
				return false;
			}

			$scope.isDateCriteria = function(cri) {
				var isDate = (generalService.stringStartWith(cri.matchingCondition, 'DATE'));
				if (isDate) {
					if (!cri.date) {
						cri.dateOpened = false;
						cri.openDate = function() {
							cri.dateOpened = true;
						}

						if (cri.value) {
							cri.date = new Date(Number(cri.value));
						} else {
							cri.date = new Date();
							cri.value = cri.date.getTime();
						}
					}
				}

				if (!cri.dateLoaded && !cri.newCri) {
					cri.dateLoaded = true;
					$scope.resetRule = angular.copy($scope.rule);
				}

				return isDate;
			}

			$scope.isNumberCriteria = function(cri) {
				return (generalService.stringStartWith(cri.matchingCondition, 'NUM'));
			}

			$scope.isStringCriteria = function(cri) {
				return (cri.matchingCondition === 'NOT' || cri.matchingCondition === 'NOT_CONTAINS' || cri.matchingCondition === 'MUST_CONTAINS' || cri.matchingCondition === 'CONTAINS');
			}

			$scope.checkDataProvider = function(value, viewValue) {
				loggerService.getLogger().debug(value + " " + viewValue);
				if (value && viewValue) {
					return generalService.stringStartWith(value, viewValue);
				} else {
					return false;
				}
			}

			$scope.changeDataProvider = function(cri, dp) {
				cri.value = dp.suggestion;
			}

			// go back to list
			$scope.backToRuleList = function(form) {
				if (!$scope.dataPristine()) {
					dialogService.confirm({
						msg : $filter('translate')('details.back.confirm'),
						ok : function() {
							$state.go("rules");
						}
					})
				} else {
					$state.go("rules");
				}

			}

			$scope.dataPristine = function() {
				if (!angular.equals($scope.rule, $scope.resetRule)) {
					return false;
				}

				if (!angular.equals($scope.weeklySchedules, $scope.resetWeeklySchedules)) {
					return false;
				}

				if (!angular.equals($scope.dailySchedules, $scope.resetDailySchedules)) {
					return false;
				}

				if (!angular.equals($scope.monthlySchedules, $scope.resetMonthlySchedules)) {
					return false;
				}

				if (!angular.equals($scope.validity, $scope.resetValidity)) {
					return false;
				}

				return true;
			}

			$scope.scrollTo = function(target) {
				$location.hash(target);
				$anchorScroll();
				/* $location.hash('resourceInfo', ''); */
				currentTarget = target;
			}

			$scope.discardRuleChanges = function(form) {
				loggerService.getLogger().info("Discarding changes");
				$scope.rule = angular.copy($scope.resetRule);
				$scope.weeklySchedules = angular.copy($scope.resetWeeklySchedules);
				$scope.dailySchedules = angular.copy($scope.resetDailySchedules);
				$scope.monthlySchedules = angular.copy($scope.resetMonthlySchedules);
				$scope.validity = angular.copy($scope.resetValidity);
				form.$setPristine();
			}

			$scope.execute = function() {
				ruleService.executeRule($scope.rule.id, function(data) {
					// ignore
				});
			}

			$scope.preview = function() {
				if (!$scope.rule.criteriaGroups) {
					$scope.rule.criteriaGroups = [];
				}
				if (!$scope.rule.directories) {
					$scope.rule.directories = [{}];
				}
				sharedService.data.query = {
					"criteria" : angular.copy($scope.rule.criteriaGroups),
					"directories" : angular.copy($scope.rule.directories)
				};

				$state.go("indexDatabaseQuery", {
					id : $scope.rule.id
				});
			}

			$scope.saveRuleChanges = function(form) {
				// to be implemented

				if (form.$invalid) {
					form.$setDirty();
					for ( var field in form) {
						if (field[0] == '$')
							continue;
						// console.log(field);
						form[field].$touched = true;
						form[field].$dirty = true;
					}
					return;
				}

				// process validity

				if ($scope.validity.expiringOn != 0 && $scope.validity.validFrom.getTime() > $scope.validity.expiringOn.getTime()) {
					dialogService.notify({
						type : "sc-dialog-error",
						msg : $filter('translate')('rule.editor.invalid.expiration.validation'),
						ok : function() {
							return;
						}
					});
					return;
				}

				$scope.rule.effectiveFrom = $scope.validity.validFrom.getTime();

				if ($scope.validity.expiringOnOption === 'specific') {
					$scope.rule.effectiveUntil = $scope.validity.expiringOn.getTime();
				} else {
					$scope.rule.effectiveUntil = 0;
				}

				// process timeslots
				// currently backend supports only one
				// element - getting the first element and put
				// directly to the executionFrequency
				loggerService.getLogger().debug($scope.rule.scheduleType);
				if ($scope.rule.scheduleType === 'D') {

					var element = {
						"time" : $scope.parseTimeToString($scope.dailySchedules[0].time, false)
					};
					$scope.rule.executionFrequency = element;

				} else if ($scope.rule.scheduleType === "W") {
					var dayArray = [];
					angular.forEach($scope.weeklySchedules[0].days, function(value, key) {
						if (value === true) {
							dayArray.push(generalService.getDayOfTheWeekMap()[key]);
							loggerService.getLogger().debug(key);
						}
					});
					var element = {
						"dayOfWeek" : dayArray,
						"time" : $scope.parseTimeToString($scope.weeklySchedules[0].time, false)

					};

					$scope.rule.executionFrequency = element;
				} else {
					var dayArray = [];
					angular.forEach($scope.monthlySchedules[0].days, function(value, key) {
						if (value === true) {
							dayArray.push(key);
						}
					});
					var element = {

						"dayOfMonth" : dayArray,
						"time" : $scope.parseTimeToString($scope.monthlySchedules[0].time, false)
					}

					$scope.rule.executionFrequency = element;
				}

				// process directories
				angular.forEach($scope.rule.directories, function(group, index) {
					angular.forEach(group.criterias, function(dir, index) {
						$scope.checkDirectory(dir);
					});
				});

				if ($scope.isCreated) {
					// if created, call add web service
					ruleService.createRule($scope.rule, function(response) {
						$state.go("rules");
					})
				} else {
					// call modify web service
					ruleService.modifyRule($scope.rule, function(response) {
						$scope.copyResetObjects();
					})
				}
				form.$setPristine();
			}

			$scope.loadRuleEngine = function() {
				$scope.ruleEngineList = [];
				$scope.totalRuleEngines = 0;
				collectionService.getCollection("RuleEngine", function(response) {
					$scope.ruleEngineList = response.data;
					$scope.totalRuleEngines = response.totalNoOfRecords;
				});
			}

			$scope.loadRuleEngine();

			$scope.changeRuleEngine = function(ruleEngine) {
				$scope.rule.ruleEngine = ruleEngine;
			}

			$scope.checkBoolean = function(param) {

				var result = false;

				if (param.dataType === 'Boolean') {
					loggerService.getLogger().debug(param);
					if (typeof param.values[0].value === "string" || param.values[0].value instanceof String) {
						if (param.values[0].value === "true") {
							param.values[0].value = true;
						} else {
							param.values[0].value = false;
						}
					}
					result = true;
				}

				if (!param.paramLoaded && !param.newParam) {
					param.paramLoaded = true;
					$scope.resetRule = angular.copy($scope.rule);
				}

				return result;
			}

			$scope.getActionPluginName = function(actionPlugin) {
				return actionPlugin.name.replace(/_/g, " ");
			}

			$scope.loadPlugins = function() {
				$scope.pluginList = [];
				$scope.totalPlugins = 0;
				collectionService.getCollection("ActionPlugin", function(response) {
					$scope.pluginList = response.data;
					$scope.totalPlugins = response.totalNoOfRecords;
				});
			};

			$scope.loadPlugins();

			$scope.addAction = function(selectPlugin) {
				var action = {
					"actionPlugin" : {
						"id" : selectPlugin.id,
						"name" : selectPlugin.name,
						"params" : selectPlugin.params
					},
					"toleranceLevel" : "S",
					"actionParams" : [],
				};

				angular.forEach(selectPlugin.params, function(param, index) {
					var actionParams = {
						"identifier" : param.identifier,
						"values" : [],
						"dataType" : param.dataType,
						"collections" : param.collections,
						"keyValue" : param.keyValue,
						"label" : param.label,
						"newParam": true

					};

					if (!param.collections) {
						if (!param.keyValue) {
							if (param.dataType == "String" || param.dataType === "Character" || param.dataType === "Email") {
								actionParams.values.push({
									"value" : ""
								});
							}
							if (param.dataType === "Number" || param.dataType === "Integer") {
								actionParams.values.push({
									"value" : 0
								});
							}
							if (param.dataType === "Boolean") {
								actionParams.values.push({
									"value" : true
								});
							}
						} else {
							actionParams.values.push({
								"key" : "",
								"value" : ""
							});
						}
					} else {
						if (param.keyValue) {
							actionParams.values.push({
								"key" : "",
								"value" : ""
							});
						}
					}
					action.actionParams.push(actionParams);
				});

				if (!$scope.rule.actions) {
					$scope.rule.actions = [];
				}
				$scope.rule.actions.push(action);
				$scope.actionCollapse[$scope.rule.actions.length - 1] = false;
				$scope.selectActionDropDownBtn = $filter('translate')('rule.editor.select.action.dropdown');
			}

			$scope.removeActionParamElement = function(param, index) {
				param.values.splice(index, 1);
			}

			$scope.addActionParamElement = function(param) {
				param.values.push({
					"key" : "",
					"value" : ""
				});
			}

			$scope.saveAction = function(index, form) {
				var isValid = true;
				for ( var field in form) {
					if (field.toString().lastIndexOf('actionParam-' + index, 0) === 0) {
						if (form[field].$invalid) {
							loggerService.getLogger().info("invalid field " + field);
							isValid = false;
							form[field].$touched = true;
							form[field].$dirty = true;
						}
					}
				}

				if (!isValid) {
					return;
				}

				$scope.actionCollapse[index] = true;
			}

			$scope.editAction = function(index) {
				$scope.actionCollapse[index] = false;
			}

			$scope.removeAction = function(index) {
				$scope.rule.actions.splice(index, 1);
				$scope.actionCollapse = {};
				for (var i = 0; i < $scope.rule.actions.length; i++) {
					$scope.actionCollapse[i] = true;
				}
			}

			// directories function
			$scope.addDirectory = function() {
				if (!$scope.rule.directories || $scope.rule.directories.length === 0) {
					$scope.rule.directories = [{
						"operator" : "AND",
						"criterias" : [{
							"dataSection" : "D",
							"matchingCondition" : "CONTAINS",
							"value" : ""
						}]
					}];
				} else if (!$scope.rule.directories[0].criterias || $scope.rule.directories[0].criterias.length == 0) {
					$scope.rule.directories[0].criterias = [{
						"dataSection" : "D",
						"matchingCondition" : "CONTAINS",
						"value" : ""
					}]
				} else {
					$scope.rule.directories[0].criterias.push({
						"dataSection" : "D",
						"matchingCondition" : "CONTAINS",
						"value" : ""
					})
				}
			}

			$scope.checkDirectory = function(dir) {

				if (!dir.value) {
					return;
				}

				if (dir.value.slice(dir.value.length - 2, dir.value.length) != ("\\*")
						&& (dir.value.slice(dir.value.length - 1, dir.value.length) != ("\\") && dir.value.slice(dir.value.length - 1, dir.value.length) != ("/"))
						&& dir.value.slice(dir.value.length - 2, dir.value.length) != ("/*")) {
					dir.value += "\\";
				}
			}

			$scope.removeDirectory = function(index) {
				$scope.rule.directories[0].criterias.splice(index, 1);
			}

		}]);mainApp.controller('ruleListController', ['$scope', '$state', 'loggerService', '$window', '$filter', 'sharedService', 'autoCloseOptionService', 'ruleService', 'configService', 'dialogService',
		function($scope, $state, loggerService, $window, $filter, sharedService, autoCloseOptionService, ruleService, configService, dialogService) {
			var PAGE_SIZE = configService.configObject['defaultRulePageSize'];
			$scope.$parent.isDetailsPage = false;

			// sorting variables

			$scope.sortOrders = configService.getSortOrders();
			$scope.sortOrder = $scope.sortOrders[1];

			$scope.refreshRuleList = function(sortFields) {

				$scope.ruleList = [];
				$scope.total = 0;
				$scope.rulePageNumber = 1;
				$scope.totalSortFields = 0;

				if (!sortFields) {
					ruleService.getSortFields(function(response) {
						$scope.sortByFields = response.data;
						loggerService.getLogger().debug(response);

						if (!$scope.sortByFields) {
							$scope.sortByFields = [{
								"code" : "modifiedOn",
								"value" : "Last Updated"
							}];
						}
						$scope.sortBy = $scope.sortByFields[0];
						var sortFields = [{
							"field" : $scope.sortBy.code,
							"order" : $scope.sortOrder.value
						}];

						ruleService.getRuleList($scope.rulePageNumber, sortFields, function(response) {
							$scope.ruleList = response.data;
							$scope.total = response.totalNoOfRecords;
							$scope.numberOfPage = ($scope.total % PAGE_SIZE == 0) ? $scope.total / PAGE_SIZE : $scope.total / PAGE_SIZE + 1;
							loggerService.getLogger().debug(response);
						});
					})
				} else {
					ruleService.getRuleList($scope.rulePageNumber, sortFields, function(response) {
						$scope.ruleList = response.data;
						$scope.total = response.totalNoOfRecords;
						$scope.numberOfPage = ($scope.total % PAGE_SIZE == 0) ? $scope.total / PAGE_SIZE : $scope.total / PAGE_SIZE + 1;
						loggerService.getLogger().debug(response);
					});
				}
			}

			$scope.refreshRuleList();

			$scope.sortByField = function(sortBy) {

				var sortFields = [{
					"field" : sortBy.code,
					"order" : $scope.sortOrder.value
				}];
				$scope.sortBy = sortBy;

				$scope.refreshRuleList(sortFields)
			}

			$scope.sortByOrder = function(sortOrder) {
				var sortFields = [{
					"field" : $scope.sortBy.code,
					"order" : sortOrder.value
				}];
				$scope.sortOrder = sortOrder

				$scope.refreshRuleList(sortFields)
			}

			$scope.loadMore = function() {
				var sortFields = [{
					"field" : $scope.sortBy.code,
					"order" : $scope.sortOrder.value
				}];
				$scope.rulePageNumber++;
				loggerService.getLogger().info("Page number " + $scope.rulePageNumber);
				ruleService.getRuleList($scope.rulePageNumber, sortFields, function(response) {
					$scope.ruleList = $scope.ruleList.concat(response.data);
					$scope.total = response.totalNoOfRecords;
					$scope.numberOfPage = ($scope.total % PAGE_SIZE == 0) ? $scope.total / PAGE_SIZE : $scope.total / PAGE_SIZE + 1;
					loggerService.getLogger().debug(response);
				});
			}

			$scope.deleteRule = function(rule, $event) {
				dialogService.confirm({
					msg : $filter('translate')('rule.del.confirm') + ": " + rule.name + "?",
					ok : function() {
						ruleService.deleteRule(rule.id, rule.modifiedOn, function(response) {
							$scope.refreshRuleList();
							loggerService.getLogger().debug(response);
						});
					}
				})
				$event.stopPropagation();
			}

			$scope.preview = function(rule) {
				if (!rule.criteriaGroups) {
					rule.criteriaGroups = [];
				}
				if (!rule.directories) {
					rule.directories = [{}];
				}
				sharedService.data.query = {
					"criteria" : angular.copy(rule.criteriaGroups),
					"directories" : angular.copy(rule.directories)
				};

				$state.go("indexDatabaseQuery", {
					id : rule.id
				});
			}

			$scope.duplicateRule = function(rule) {
				rule.name = rule.name + " - Duplicate";
				rule.enabled = false;
				ruleService.createRule(rule, function(response) {
					$scope.refreshRuleList();
				});

			}

			$scope.openRule = function(rule) {
				loggerService.getLogger().info("Openning rule " + rule.id);
				$state.go('ruleDetails', {
					id : rule.id
				});
			}

			$scope.createNewRule = function() {
				loggerService.getLogger().info("Go to creating new rule");
				$state.go('ruleDetails', {
					id : 'create'
				})
			}

			var ruleWithOpenOption = [];
			$scope.closeAllOpenOption = function() {
				if (ruleWithOpenOption.length > 0) {
					angular.forEach(ruleWithOpenOption, function(rule) {
						loggerService.getLogger().info("The Rule object is = " + JSON.stringify(rule));
						if (rule.optionOpen)
							rule.optionOpen = false;
					});
					ruleWithOpenOption = [];
				}
			}
			$scope.openOption = function(rule, open, $event) {
				if (angular.isDefined(open)) {
					rule.optionOpen = open;
					if (open) {
						$scope.closeAllOpenOption();
						autoCloseOptionService.close();
						autoCloseOptionService.registerOpen($scope, $scope.closeAllOpenOption);
						ruleWithOpenOption.push(rule);
					} else {
						ruleWithOpenOption = [];
					}
				} else
					return angular.isDefined(rule.optionOpen) ? rule.optionOpen : false;
			};

			$scope.isOptionOpen = function(rule) {
				if (rule.optionOpen) {
					return rule.optionOpen;
				} else {
					return false;
				}
			}

		}]);mainApp.factory('ruleService', ['networkService', 'loggerService', 'configService', '$filter', 'statusCodeService', 'collectionService',
		function(networkService, loggerService, configService, $filter, statusCodeService, collectionService) {

			var PAGE_SIZE = configService.configObject['defaultRulePageSize'];
			var matchingConditions = [];
			var metaDataMatchingConditions = [];
			var dataProviders = [];
			var dataSections = ["D", "N", "H", "C", "F", "A", "M"];
			var metaDataList = [];

			var getSortFields = function(callback) {
				networkService.get(configService.getUrl("rule.sortFields"), function(data) {
					statusCodeService.list("rule sort fields", callback, data);
				});
			}

			var getMetaDataList = function(callback) {
				if (metaDataList && metaDataList.length > 0) {
					callback(metaDataList);
				}
				collectionService.getCollection("MetadataFieldName", function(response) {
					if (callback) {
						callback(response.data);
					}
					metaDataList = response.data;
				});
			}

			var getRuleList = function(pageNo, sortFields, callback) {
				loggerService.getLogger().info("Get rule list with page number " + pageNo + " and page size " + PAGE_SIZE);
				var requestData = {
					'sortFields' : sortFields,
					'pageNo' : pageNo,
					'pageSize' : PAGE_SIZE
				};

				networkService.post(configService.getUrl("rule.list"), requestData, function(data) {
					statusCodeService.list("rule", callback, data);
				});
			}

			var getRule = function(ruleID, callback) {
				loggerService.getLogger().info("Get rule with ID " + ruleID);

				networkService.get(configService.getUrl("rule.get") + ruleID, function(data) {
					statusCodeService.get("rule", callback, data);
				});
			}

			var createRule = function(rule, callback) {
				loggerService.getLogger().info("Creating rule with details " + rule);
				var requestData = rule;
				networkService.post(configService.getUrl("rule.add"), requestData, function(data) {
					statusCodeService.create("Rule", callback, data);
				})
			}

			var modifyRule = function(rule, callback) {
				loggerService.getLogger().info("Modifying rule  " + rule.id);

				var requestData = rule;

				networkService.put(configService.getUrl("rule.modify"), requestData, function(data) {
					statusCodeService.modify("rule", callback, data);
				});
			}

			var deleteRule = function(id, lastModifiedDate, callback) {
				loggerService.getLogger().info("Deleting rule " + id);

				networkService.del(configService.getUrl("rule.delete") + id + "/" + lastModifiedDate, function(data) {
					statusCodeService.del("rule", callback, data);
				})
			}

			var executeRule = function(id, callback) {
				loggerService.getLogger().info("Executing rule " + id);

				networkService.post(configService.getUrl("rule.execute") + id, null, function(data) {
					statusCodeService.execute("rule execution", callback, data);
				});
			}

			var getMatchingConditions = function(callback) {
				if (matchingConditions && matchingConditions.length > 0) {
					callback(matchingConditions);
				}
				collectionService.getCollection("MatchingCondition", function(response) {
					if (callback) {
						callback(response.data);
					}
					matchingConditions = response.data;
				});

			}

			var getMetaDataMatchingConditions = function(callback) {
				if (metaDataMatchingConditions && metaDataMatchingConditions.length > 0) {
					callback(metaDataMatchingConditions);
				}
				collectionService.getCollection("MetaDataMatchingCondition", function(response) {
					if (callback) {
						callback(response.data);
					}
					metaDataMatchingConditions = response.data;
				});

			}

			var getDataProviders = function(callback) {
				if (dataProviders && dataProviders.length > 0) {
					callback(dataProviders);
				}
				collectionService.getCollection("DataProvider", function(response) {
					if (callback) {
						callback(response.data);
					}
					dataProviders = response.data;
				});
			}

			var getDataSections = function() {
				return dataSections;
			}

			return {
				getRuleList : getRuleList,
				getRule : getRule,
				modifyRule : modifyRule,
				getSortFields : getSortFields,
				deleteRule : deleteRule,
				getMatchingConditions : getMatchingConditions,
				getMetaDataMatchingConditions : getMetaDataMatchingConditions,
				getDataProviders : getDataProviders,
				getDataSections : getDataSections,
				createRule : createRule,
				getMetaDataList : getMetaDataList,
				executeRule : executeRule
			}

		}]);;mainApp.controller('extractorController', ['$scope', 'loggerService', 'collectionService', 'scServicesService', '$location', "$anchorScroll", '$filter',
		function($scope, loggerService, collectionService, scServicesService, $location, $anchorScroll, $filter) {

			loggerService.getLogger().info("Extractor id is " + $scope.serviceID);

			if (!$scope.service.documentSizeLimits) {
				$scope.service.documentSizeLimits = [];
			}

			// initialize execution window sets
			$scope.serviceTempObject.associatedExecutionWindowSetsMap = {};
			angular.forEach($scope.service.executionWindowSets, function(window, index) {
				$scope.serviceTempObject.associatedExecutionWindowSetsMap[window.id] = true;
			})

			// initialize config reload interval .. convert to
			// hours or mins based on the value
			if ($scope.service.configReloadInterval >= 3600 && $scope.service.configReloadInterval % 3600 == 0) {
				$scope.serviceTempObject.configReloadIntervalUnit = "hour";
				$scope.serviceTempObject.configReloadIntervalTemp = $scope.service.configReloadInterval / 3600;
			} else {
				$scope.serviceTempObject.configReloadIntervalUnit = "min";
				$scope.serviceTempObject.configReloadIntervalTemp = $scope.service.configReloadInterval / 60;
				if ($scope.serviceTempObject.configReloadIntervalTemp < 5) {
					$scope.serviceTempObject.configReloadIntervalTemp = 5;
					$scope.service.configReloadInterval = 300;
				}
			}

			var currentTarget = "extractorInfo";
			$scope.scrollTo = function(target) {
				loggerService.getLogger().info("Scrolling to " + target);
				$location.hash(target);
				$anchorScroll();
				currentTarget = target;
			}

			$scope.highlightGrammar = function(target) {
				currentTarget = target;
			}

			$scope.mapDocumentTypeAssocations = new Object();

			$scope.selectedExecutionWindowName = $filter('translate')("component.editor.dropdown.heading");
			$scope.loadHeapMemoryList = function() {
				$scope.heapMemoryList = [128, 256, 384, 512];
				loggerService.getLogger().debug($scope.heapMemoryList);
			}

			$scope.loadHeapMemoryList();

			$scope.changeHeapMemory = function(heapMemory) {
				$scope.service.minimumHeapMemory = heapMemory;
			}

			$scope.addToExecutionWindowList = function(selectedExecutionWindow) {
				// add to the array

				if (!$scope.service.executionWindowSets) {
					$scope.service.executionWindowSets = [];
				}

				$scope.service.executionWindowSets.push(selectedExecutionWindow);
				$scope.serviceTempObject.associatedExecutionWindowSetsMap[selectedExecutionWindow.id] = true;
				$scope.selectedExecutionWindowName = $filter('translate')("component.editor.dropdown.heading");
			}

			$scope.getExecutionWindowRowClass = function(index) {
				if (index % 2 == 0) {
					return "sc-data-list-row-even";
				} else {
					return "sc-data-list-row-odd";
				}
			}

			$scope.removeExecutionWindow = function(index) {
				$scope.serviceTempObject.associatedExecutionWindowSetsMap[$scope.service.executionWindowSets[index].id] = false;
				$scope.service.executionWindowSets.splice(index, 1);
			}

			$scope.changeConfigReloadIntervalUnit = function(unit, interval) {
				$scope.serviceTempObject.configReloadIntervalUnit = unit;
				$scope.onConfigReloadIntervalEdit(interval);
			}

			$scope.onConfigReloadIntervalEdit = function(interval) {
				if ($scope.serviceTempObject.configReloadIntervalUnit == "hour") {
					$scope.service.configReloadInterval = interval * 3600;
				} else {
					$scope.service.configReloadInterval = interval * 60;
				}
			}

			$scope.loadDocumentTypes = function() {
				$scope.documentTypes = [];
				$scope.totalDocumentTypes = 0;
				collectionService.getCollection("DocumentType", function(response) {
					$scope.documentTypes = response.data;
					$scope.totalDocumentTypes = response.totalNoOfRecords;
					$scope.updateDocumentSizeLimitsArray()

				});

			}
			$scope.loadDocumentTypes();

			$scope.updateDocumentSizeLimitsArray = function() {

				if (typeof $scope.service.documentSizeLimits != 'undefined') {
					for (var i = 0; i < $scope.documentTypes.length; i++) {
						if (!containsDocumentExtractor($scope.service.documentSizeLimits, $scope.documentTypes[i])) {
							var documentSizeObject = {
								"documentExtractor" : {
									"extension" : "doc",
									"id" : 1512010900000003
								},
								"maxFileSize" : 0
							};
							documentSizeObject.documentExtractor.extension = $scope.documentTypes[i].extension;
							documentSizeObject.documentExtractor.id = $scope.documentTypes[i].id;
							documentSizeObject.maxFileSize = 0;
							$scope.service.documentSizeLimits.push(documentSizeObject);
						}
					}

				} else {
					$scope.service.documentSizeLimits = [];
					for (var i = 0; i < $scope.documentTypes.length; i++) {
						var documentSizeObject = {
							"documentExtractor" : {
								"extension" : "doc",
								"id" : 1512010900000003
							},
							"maxFileSize" : 0
						};
						documentSizeObject.documentExtractor.extension = $scope.documentTypes[i].extension;
						documentSizeObject.documentExtractor.id = $scope.documentTypes[i].id;
						documentSizeObject.maxFileSize = 0;
						$scope.service.documentSizeLimits.push(documentSizeObject);
					}

				}
				$scope.resetService = angular.copy($scope.service)
				loggerService.getLogger().debug("The service.documentSizeLimits now become = " + JSON.stringify($scope.service.documentSizeLimits));
			}

			var containsDocumentExtractor = function(list, obj) {
				for (var i = 0; i < list.length; i++) {
					if (list[i].documentExtractor.id === obj.id) {
						return true;
					}
				}
				return false;
			}


			$scope.updateResetObject = function() {
				$scope.$parent.setResetServiceTempObject(angular.copy($scope.serviceTempObject));
				loggerService.getLogger().debug("Updating reset object " + JSON.stringify($scope.$parent.resetServiceTempObject));
			}

			$scope.updateResetObject();

		}]);mainApp.controller('ruleEngineController', ['$scope', 'loggerService', 'collectionService', 'scServicesService', '$location', "$anchorScroll", '$filter',
		function($scope, loggerService, collectionService, scServicesService, $location, $anchorScroll, $filter) {

			loggerService.getLogger().info("Rule Engine id is " + $scope.serviceID);

			$scope.serviceTempObject.associatedExecutionWindowSetsMap = {};
			angular.forEach($scope.service.executionWindowSets, function(window, index) {
				$scope.serviceTempObject.associatedExecutionWindowSetsMap[window.id] = true;
			})

			// initialize config reload interval .. convert to
			// hours or mins based on the value
			if ($scope.service.configReloadInterval >= 3600 && $scope.service.configReloadInterval % 3600 == 0) {
				$scope.serviceTempObject.configReloadIntervalUnit = "hour";
				$scope.serviceTempObject.configReloadIntervalTemp = $scope.service.configReloadInterval / 3600;
			} else {
				$scope.serviceTempObject.configReloadIntervalUnit = "min";
				$scope.serviceTempObject.configReloadIntervalTemp = $scope.service.configReloadInterval / 60;
				if ($scope.serviceTempObject.configReloadIntervalTemp < 5) {
					$scope.serviceTempObject.configReloadIntervalTemp = 5;
					$scope.service.configReloadInterval = 300;
				}
			}
			// ON DEMAND RULE FREQUENCY
			if ($scope.service.onDemandInterval >= 60 && $scope.service.onDemandInterval % 60 == 0) {
				$scope.serviceTempObject.onDemandIntervalUnit = "min";
				$scope.serviceTempObject.onDemandIntervalTemp = $scope.service.onDemandInterval / 60;
			} else {
				$scope.serviceTempObject.onDemandIntervalUnit = "second";
				$scope.serviceTempObject.onDemandIntervalTemp = $scope.service.onDemandInterval;
			}

			// SCHEDULED RULE FREQUENCY
			if ($scope.service.scheduledInterval >= 60 && $scope.service.scheduledInterval % 60 == 0) {
				$scope.serviceTempObject.scheduledIntervalUnit = "min";
				$scope.serviceTempObject.scheduledIntervalTemp = $scope.service.scheduledInterval / 60;
			} else {
				$scope.serviceTempObject.scheduledIntervalUnit = "second";
				$scope.serviceTempObject.scheduledIntervalTemp = $scope.service.scheduledInterval;
			}

			var currentTarget = "ruleEngineInfo";
			$scope.scrollTo = function(target) {
				loggerService.getLogger().info("Scrolling to " + target);
				$location.hash(target);
				$anchorScroll();
				currentTarget = target;
			}

			$scope.highlightGrammar = function(target) {
				currentTarget = target;
			}

			$scope.selectedExecutionWindowName = $filter('translate')("component.editor.dropdown.heading");

			$scope.addToExecutionWindowList = function(selectedExecutionWindow) {

				if (!$scope.service.executionWindowSets) {
					$scope.service.executionWindowSets = [];
				}
				$scope.service.executionWindowSets.push(selectedExecutionWindow);
				$scope.serviceTempObject.associatedExecutionWindowSetsMap[selectedExecutionWindow.id] = true;
				$scope.selectedExecutionWindowName = $filter('translate')("component.editor.dropdown.heading");
			}

			$scope.getExecutionWindowRowClass = function(index) {
				if (index % 2 == 0) {
					return "sc-data-list-row-even";
				} else {
					return "sc-data-list-row-odd";
				}
			}

			$scope.removeExecutionWindow = function(index) {
				$scope.serviceTempObject.associatedExecutionWindowSetsMap[$scope.service.executionWindowSets[index].id] = false;
				$scope.service.executionWindowSets.splice(index, 1);
			}

			$scope.changeConfigReloadIntervalUnit = function(unit, interval) {
				$scope.serviceTempObject.configReloadIntervalUnit = unit;
				$scope.onConfigReloadIntervalEdit(interval);
			}

			$scope.onConfigReloadIntervalEdit = function(interval) {
				if ($scope.serviceTempObject.configReloadIntervalUnit == "hour") {
					$scope.service.configReloadInterval = interval * 3600;
				} else {
					$scope.service.configReloadInterval = interval * 60;
				}
			}

			$scope.onDemandRuleIntervalEdit = function(interval) {
				if ($scope.serviceTempObject.onDemandIntervalUnit == "min") {
					$scope.service.onDemandInterval = interval * 60;
				} else {
					$scope.service.onDemandInterval = interval;
				}
			}

			$scope.onScheduledRuleIntervalEdit = function(interval) {
				if ($scope.serviceTempObject.scheduledIntervalUnit == "min") {
					$scope.service.scheduledInterval = interval * 60;
				} else {
					$scope.service.scheduledInterval = interval;
				}
			}

			$scope.changeOnDemandRuleIntervalUnit = function(unit, interval) {
				$scope.serviceTempObject.onDemandIntervalUnit = unit;
				$scope.onDemandRuleIntervalEdit(interval);
			}

			$scope.changeScheduledRuleIntervalUnit = function(unit, interval) {
				$scope.serviceTempObject.scheduledIntervalUnit = unit;
				$scope.onScheduledRuleIntervalEdit(interval);
			}

			$scope.updateResetObject = function() {
				$scope.$parent.setResetServiceTempObject(angular.copy($scope.serviceTempObject));
				loggerService.getLogger().debug("Updating reset object " + JSON.stringify($scope.$parent.resetServiceTempObject));
			}

			$scope.updateResetObject();

		}]);mainApp.controller('serviceDetailsController', ['$scope', '$state', '$location', 'loggerService', '$stateParams', '$filter', 'sharedService', 'scServicesService', 'dialogService',
		'collectionService', 'executionWindowService',
		function($scope, $state, $location, loggerService, $stateParams, $filter, sharedService, scServicesService, dialogService, collectionService, executionWindowService) {
			$scope.$parent.isDetailsPage = true;
			$scope.serviceTempObject = {};
			$scope.resetServiceTempObject = {};
			$scope.serviceType = $stateParams.type;
			$scope.serviceID = $stateParams.id;
			$scope.serviceController = $scope.serviceType + "Controller";
			$scope.mapExecutionWindowCollection = new Object();
			$scope.serviceController = $scope.serviceType + "Controller";

			var mapDayOftheWeek = {
				"0" : "Sun",
				"1" : "Mon",
				"2" : "Tue",
				"3" : "Wed",
				"4" : "Thu",
				"5" : "Fri",
				"6" : "Sat"
			};

			loggerService.getLogger().info("Service type is " + $scope.serviceType);
			loggerService.getLogger().info("Service id is " + $scope.serviceID);

			// initialize service
			$scope.reloadService = function() {
				/* if (!sharedService.data.serviceDetails) { */
				loggerService.getLogger().info("Cannot retrieve service from shared data. " + "Making a request to retrieve the service");

				scServicesService.getService($scope.serviceType, $scope.serviceID, function(response) {
					$scope.service = response.data;
					$scope.resetService = angular.copy($scope.service);
					loggerService.getLogger().debug($scope.service);
					if (!$scope.service) {
						$scope.detailsFound = false;
					} else {
						$scope.detailsFound = true;
					}
				});
				/*
				 * } else { $scope.service = sharedService.data.serviceDetails;
				 * $scope.resetService = angular.copy($scope.service);
				 * $scope.detailsFound = true; }
				 */
			}

			$scope.reloadService();

			$scope.backToServiceList = function(form) {
				if (!$scope.dataPristine()) {
					dialogService.confirm({
						msg : $filter('translate')('details.back.confirm'),
						ok : function() {
							$state.go("scservices", {
								type : $scope.serviceType
							});
						}
					})
				} else {
					$state.go("scservices", {
						type : $scope.serviceType
					});
				}

			}

			$scope.dataPristine = function() {
				if (!angular.equals($scope.service, $scope.resetService)) {
					loggerService.getLogger().debug("service and resetService not equal");
					return false;
				}

				if (!angular.equals($scope.serviceTempObject, $scope.resetServiceTempObject)) {
					loggerService.getLogger().debug("serviceTempObject and resetServiceTempObject not equal");
					return false;
				}
				return true;
			}

			$scope.getServiceController = function() {
				return $scope.serviceType + 'Controller';
			}

			$scope.scrollTo = function(target) {
				$location.hash(target);
				$anchorScroll();
				$location.hash('resourceInfo', '');
				currentTarget = target;
			}

			$scope.checkEmptyExecutionWindowList = function() {
				if (!$scope.executionWindowCollection) {
					return true;
				} else {
					if ($scope.service.executionWindowSets && $scope.service.executionWindowSets.length === $scope.executionWindowCollection.length) {
						return true;
					}
				}
				return false;
			}

			$scope.discardServiceChanges = function(form) {
				loggerService.getLogger().info("Discarding changes");
				$scope.service = angular.copy($scope.resetService);
				$scope.serviceTempObject = angular.copy($scope.resetServiceTempObject);
				form.$setPristine();
			}

			$scope.saveServiceChanges = function(form) {
				// to be implemented

				if (form.$invalid) {
					form.$setDirty();
					for ( var field in form) {
						if (field[0] == '$')
							continue;
						form[field].$touched = true;
					}
					return;
				}

				loggerService.getLogger().debug($scope.service.name);

				scServicesService.modifyService($scope.service, $scope.serviceType, function(response) {
					$scope.resetService = angular.copy($scope.service);
					$scope.resetServiceTempObject = angular.copy($scope.serviceTempObject);
					loggerService.getLogger().info(response.message);
				});
				form.$setPristine();
			}

			$scope.loadJMSList = function() {
				$scope.jmsList = [];
				$scope.totalJMSProfiles = 0;
				collectionService.getCollection("JMSProfile", function(response) {
					$scope.jmsList = response.data;
					$scope.totalJMSProfiles = response.totalNoOfRecords;
					loggerService.getLogger().debug("JMS List" + $scope.jmsList);
				});
			}

			$scope.loadJMSList();

			$scope.changeJMSProfile = function(jmsProfile) {
				$scope.service.JMSProfile = jmsProfile;
			}

			$scope.loadExecutionWindowCollection = function() {
				$scope.executionWindowCollection = [];

				$scope.totalExecutionWindows = 0;
				collectionService.getCollection("ExecutionWindowSet", function(response) {
					$scope.executionWindowCollection = response.data;
					$scope.totalExecutionWindows = response.totalNoOfRecords;
				});
			}

			$scope.returnScheduleString = function(executionWindow) {
				return executionWindowService.createScheduleString(executionWindow);
			}

			$scope.loadExecutionWindowCollection();

			$scope.setResetServiceTempObject = function(object) {
				$scope.resetServiceTempObject = object;
			}

		}]);mainApp.factory('scServicesService', ['networkService', 'loggerService', 'configService', '$filter', 'statusCodeService',
		function(networkService, loggerService, configService, $filter, statusCodeService) {

			var PAGE_SIZE = configService.configObject['defaultServicePageSize'];

			var getSortFields = function() {
				return [{
					label : $filter('translate')('services.sort.by.name'),
					field : "name"
				}];
			}

			var getServiceList = function(serviceType, pageNo, sortFields, callback) {
				loggerService.getLogger().info("Get service list of type " + serviceType + " with page number " + pageNo + " and page size " + PAGE_SIZE);
				var requestData = {
					'sortFields' : sortFields,
					'pageNo' : pageNo,
					'pageSize' : PAGE_SIZE
				};

				loggerService.getLogger().info("Request data " + JSON.stringify(requestData));

				loggerService.getLogger().debug(configService.getUrl(serviceType + ".list"));

				networkService.post(configService.getUrl(serviceType + ".list"), requestData, function(data) {
					statusCodeService.list(serviceType, callback, data);
				});
			}

			var getService = function(serviceType, serviceID, callback) {
				loggerService.getLogger().info("Get service of type " + serviceType + " with ID " + serviceID);

				loggerService.getLogger().debug(configService.getUrl(serviceType + ".get") + serviceID);

				networkService.get(configService.getUrl(serviceType + ".get") + serviceID, function(data) {
					statusCodeService.get(serviceType, callback, data);
				});
			}

			var modifyService = function(service, serviceType, callback) {
				loggerService.getLogger().info("Modifying " + serviceType + "  " + service.id);

				loggerService.getLogger().debug(service.name);

				var requestData = service;

				networkService.put(configService.getUrl(serviceType + ".modify"), requestData, function(data) {
					statusCodeService.modify(serviceType, callback, data);
				});
			}

			return {
				getServiceList : getServiceList,
				getService : getService,
				modifyService : modifyService,
				getSortFields : getSortFields
			}

		}]);;mainApp.controller('servicesListController', ['$scope', '$state', 'loggerService', '$window', '$stateParams', '$filter', 'sharedService', 'autoCloseOptionService', 'scServicesService',
		'configService', function($scope, $state, loggerService, $window, $stateParams, $filter, sharedService, autoCloseOptionService, scServicesService, configService) {
			var PAGE_SIZE = configService.configObject['defaultServicePageSize'];
			$scope.$parent.isDetailsPage = false;
			$scope.serviceType = $stateParams.type;
			loggerService.getLogger().info("Service type is " + $scope.serviceType);

			// sorting variables
			// currently hard coded data
			$scope.sortByFields = scServicesService.getSortFields();
			$scope.sortOrders = configService.getSortOrders();
			$scope.sortOrder = $scope.sortOrders[0];
			$scope.sortBy = $scope.sortByFields[0];
			var sortFields = [{
				"field" : $scope.sortBy.field,
				"order" : $scope.sortOrder.value
			}];

			if ($scope.serviceType == "watcher") {
				$scope.title = $filter('translate')('TAB.SCServices.Watchers');
			} else if ($scope.serviceType == "extractor") {
				$scope.title = $filter('translate')('TAB.SCServices.Extractors');
			} else {
				$scope.title = $filter('translate')('TAB.SCServices.RuleEngine');
			}

			$scope.refreshServiceList = function(sortFields) {
				$scope.serviceList = [];
				$scope.paginator = [];
				$scope.total = 0;
				$scope.servicePageNumber = 1;
				scServicesService.getServiceList($scope.serviceType, $scope.servicePageNumber, sortFields, function(serviceList) {
					$scope.serviceList = serviceList.data;
					$scope.total = serviceList.totalNoOfRecords;
					$scope.numberOfPage = ($scope.total % PAGE_SIZE == 0) ? $scope.total / PAGE_SIZE : $scope.total / PAGE_SIZE + 1;
					loggerService.getLogger().debug(serviceList);

					/*
					 * if ($scope.total > 0) { for (i = 1; i <=
					 * $scope.numberOfPage; i++) { $scope.paginator .push(i); } }
					 */
				});
			}

			$scope.refreshServiceList(sortFields);

			$scope.sortByField = function(sortBy) {

				var sortFields = [{
					"field" : sortBy.field,
					"order" : $scope.sortOrder.value
				}];
				$scope.sortBy = sortBy;

				$scope.refreshServiceList(sortFields)
			}

			$scope.sortByOrder = function(sortOrder) {
				var sortFields = [{
					"field" : $scope.sortBy.field,
					"order" : sortOrder.value
				}];
				$scope.sortOrder = sortOrder

				$scope.refreshServiceList(sortFields)
			}

			$scope.loadMore = function() {
				var sortFields = [{
					"field" : $scope.sortBy.field,
					"order" : $scope.sortOrder.value
				}];
				$scope.servicePageNumber++;
				loggerService.getLogger().debug($scope.servicePageNumber);
				scServicesService.getServiceList($scope.serviceType, $scope.servicePageNumber, sortFields, function(serviceList) {
					$scope.serviceList = $scope.serviceList.concat(serviceList.data);
					$scope.total = serviceList.totalNoOfRecords;
					$scope.numberOfPage = ($scope.total % PAGE_SIZE == 0) ? $scope.total / PAGE_SIZE : $scope.total / PAGE_SIZE + 1;
					loggerService.getLogger().debug(serviceList);

					/*
					 * if ($scope.total > 0) { for (i = 1; i <=
					 * $scope.numberOfPage; i++) { $scope.paginator .push(i); } }
					 */
				});
			}

			// pagination starts - if needed
			$scope.goToPage = function(index) {
				$scope.servicePageNumber = index;
				$scope.refreshServiceList();
			}

			$scope.nextPage = function() {
				if ($scope.servicePageNumber != $scope.numberOfPage) {
					$scope.servicePageNumber++;
					$scope.refreshServiceList();
				}
			}

			$scope.previousPage = function() {
				if ($scope.servicePageNumber != 1) {
					$scope.servicePageNumber--;
					$scope.refreshServiceList();
				}
			}
			// pagination ends

			$scope.openService = function(service) {
				loggerService.getLogger().info("Openning " + $scope.serviceType + " " + service.name);
				sharedService.data.serviceDetails = service;
				$state.go('serviceDetails', {
					type : $scope.serviceType,
					id : service.id
				});
			}

			$scope.getServiceClass = function(service) {
				return 'sc-status-' + service.status;
			}

			var serviceWithOpenOption = [];
			$scope.closeAllOpenOption = function() {
				if (serviceWithOpenOption.length > 0) {
					angular.forEach(serviceWithOpenOption, function(service) {
						loggerService.getLogger().debug("The service object is = " + JSON.stringify(service))
						if (service.optionOpen)
							service.optionOpen = false;
					});
					serviceWithOpenOption = [];
				}
			}
			$scope.openOption = function(service, open, $event) {
				if (angular.isDefined(open)) {
					service.optionOpen = open;
					if (open) {
						$scope.closeAllOpenOption();
						autoCloseOptionService.close();
						autoCloseOptionService.registerOpen($scope, $scope.closeAllOpenOption);
						serviceWithOpenOption.push(service);
					} else {
						serviceWithOpenOption = [];
					}
				} else
					return angular.isDefined(service.optionOpen) ? service.optionOpen : false;
			};

			$scope.isOptionOpen = function(service) {
				if (service.optionOpen) {
					return service.optionOpen;
				} else {
					return false;
				}
			}

		}]);mainApp.controller('watcherController', ['$scope', 'loggerService', 'scServicesService', '$location', "$anchorScroll", 'collectionService', 'generalService',
		function($scope, loggerService, scServicesService, $location, $anchorScroll, collectionService, generalService) {

			loggerService.getLogger().info("Watcher id is " + $scope.serviceID);

			// initialize config reload interval .. convert to
			// hours or mins based on the value
			if ($scope.service.configReloadInterval >= 3600 && $scope.service.configReloadInterval % 3600 == 0) {
				$scope.serviceTempObject.configReloadIntervalUnit = "hour";
				$scope.serviceTempObject.configReloadIntervalTemp = $scope.service.configReloadInterval / 3600;
			} else {
				$scope.serviceTempObject.configReloadIntervalUnit = "min";
				$scope.serviceTempObject.configReloadIntervalTemp = $scope.service.configReloadInterval / 60;
				if ($scope.serviceTempObject.configReloadIntervalTemp < 5) {
					$scope.serviceTempObject.configReloadIntervalTemp = 5;
					$scope.service.configReloadInterval = 300;
				}
			}

			// scroll to functionality
			var currentTarget = "watcherInfo";
			$scope.scrollTo = function(target) {
				loggerService.getLogger().info("Scrolling to " + target);
				$location.hash(target);
				$anchorScroll();
				/* $location.hash('watcherInfo', ''); */
				currentTarget = target;
			}

			$scope.highlightGrammar = function(target) {
				currentTarget = target;
			}

			$scope.changeConfigReloadIntervalUnit = function(unit, interval) {
				$scope.serviceTempObject.configReloadIntervalUnit = unit;
				$scope.onConfigReloadIntervalEdit(interval);
			}

			$scope.onConfigReloadIntervalEdit = function(interval) {
				if ($scope.serviceTempObject.configReloadIntervalUnit == "hour") {
					$scope.service.configReloadInterval = interval * 3600;
				} else {
					$scope.service.configReloadInterval = interval * 60;
				}
			}

			$scope.loadDirectories = function() {
				$scope.serviceTempObject.inDirectories = [];

			}

			$scope.loadDocumentTypes = function() {
				$scope.documentTypes = [];
				$scope.totalDocumentTypes = 0;
				// $scope.serviceTempObject.mapDocumentTypeAssociation
				// = new Object();
				// $scope.mapDocumentSizeLimits = new Object();
				// $scope.mapDocumentTypeId = new Object();
				collectionService.getCollection("DocumentType", function(response) {
					$scope.documentTypes = response.data;
					$scope.totalDocumentTypes = response.totalNoOfRecords;
					// updateDocumentTypeAssociations()
					/*
					 * for (var i = 0; i < $scope.documentTypes.length; i++) {
					 * $scope.serviceTempObject.mapDocumentTypeAssociation[$scope.documentTypes[i].extension] =
					 * false;
					 * $scope.mapDocumentTypeId[$scope.documentTypes[i].extension] =
					 * $scope.documentTypes[i].id; } $scope
					 * .createMapOfDocumentAssociations();
					 */
					$scope.updateDocumentTypeAssociations();
				});

			}
			$scope.loadDocumentTypes();

			$scope.updateDocumentTypeAssociations = function() {

				if (typeof $scope.service.documentTypeAssociations != 'undefined') {
					for (var i = 0; i < $scope.documentTypes.length; i++) {
						if (!containsDocumentExtractor($scope.service.documentTypeAssociations, $scope.documentTypes[i])) {
							var documentExtractorObject = {
								"documentExtractor" : {
									"extension" : "doc",
									"id" : 1512010900000003
								},
								"include" : false
							};
							documentExtractorObject.documentExtractor.extension = $scope.documentTypes[i].extension;
							documentExtractorObject.documentExtractor.id = $scope.documentTypes[i].id;
							documentExtractorObject.include = false;
							$scope.service.documentTypeAssociations.push(documentExtractorObject);
						}
					}
				} else {

					$scope.service.documentTypeAssociations = [];
					for (var i = 0; i < $scope.documentTypes.length; i++) {
						var documentExtractorObject = {
							"documentExtractor" : {
								"extension" : "doc",
								"id" : 1512010900000003
							},
							"include" : false
						};
						documentExtractorObject.documentExtractor.extension = $scope.documentTypes[i].extension;
						documentExtractorObject.documentExtractor.id = $scope.documentTypes[i].id;
						documentExtractorObject.include = false;
						$scope.service.documentTypeAssociations.push(documentExtractorObject);
					}
				}
				loggerService.getLogger().debug("The service.documentTypeAssociations now become = " + JSON.stringify($scope.service.documentTypeAssociations));
			}

			var containsDocumentExtractor = function(list, obj) {
				for (var i = 0; i < list.length; i++) {
					if (list[i].documentExtractor.id === obj.id) {
						return true;
					}
				}
				return false;
			}

			$scope.checkExFolder = function(inFolder, exFolder) {
				if (!exFolder.path || exFolder.path.length === 0) {
					exFolder.path = inFolder.path;
				}

				if (!inFolder.path) {
					return;
				}

				if (!generalService.isSubFolder(exFolder.path, inFolder.path)) {
					exFolder.path = inFolder.path;
				}
			}

			$scope.addExcludeFolder = function(inFolder) {
				if (!inFolder.excludeRepositoryFolders) {
					inFolder.excludeRepositoryFolders = [];
				}
				inFolder.excludeRepositoryFolders.push({
					path : inFolder.path
				})
			}

			$scope.removeExcludeFolder = function(index, inFolder) {
				inFolder.excludeRepositoryFolders.splice(index, 1);
			}

			$scope.removeInFolder = function(index) {
				$scope.service.repositoryFolders.splice(index, 1)
			}

			$scope.addIncludeFolder = function() {
				if (!$scope.service.repositoryFolders) {
					$scope.service.repositoryFolders = [];
				}
				$scope.service.repositoryFolders.push({
					path : ""
				});
			}

			$scope.updateResetObject = function() {
				$scope.$parent.setResetServiceTempObject(angular.copy($scope.serviceTempObject));
				loggerService.getLogger().debug("Updating reset object " + JSON.stringify($scope.$parent.resetServiceTempObject));
			}

			$scope.updateResetObject();
		}]);mainApp.controller('executionWindowDetailsController', ['$scope', '$state', '$location', 'loggerService', '$stateParams', '$filter', 'dialogService', 'executionWindowService', '$anchorScroll',
		'uibDateParser', 'generalService',
		function($scope, $state, $location, loggerService, $stateParams, $filter, dialogService, executionWindowService, $anchorScroll, uibDateParser, generalService) {
			$scope.$parent.isDetailsPage = true;
			$scope.validity = {};

			// validity variables
			$scope.executionWindowID = $stateParams.id;
			$scope.validFromPopUp = {
				opened : false
			};
			$scope.expiringOnPopUp = {
				opened : false
			}

			$scope.validFromOpen = function() {
				$scope.validFromPopUp.opened = true;
			}

			$scope.expiringOnOpen = function() {
				$scope.expiringOnPopUp.opened = true;
			}

			// schedule variables
			$scope.dayOfTheWeek = generalService.getDayOfTheWeek();

			// reload executionWindow
			$scope.reloadExecutionWindow = function() {

				executionWindowService.getExecutionWindow($scope.executionWindowID, function(response) {
					$scope.executionWindow = response.data;

					// process validity
					$scope.validity.validFrom = new Date($scope.executionWindow.effectiveFrom);
					if ($scope.executionWindow.effectiveUntil == 0) {
						$scope.validity.expiringOnOption = "never";
						$scope.validity.expiringOn = new Date();
					} else {
						$scope.validity.expiringOnOption = "specific";
						$scope.validity.expiringOn = new Date($scope.executionWindow.effectiveUntil);
					}

					$scope.loadExecutionWindowSlots();

					// copy data to reset
					// variables to be used in
					// discard function
					$scope.copyResetObjects();

					loggerService.getLogger().debug($scope.executionWindow);
					if (!$scope.executionWindow) {
						$scope.detailsFound = false;
					} else {
						$scope.detailsFound = true;
					}
				})
			}
			
			$scope.copyResetObjects = function() {
				$scope.resetExecutionWindow = angular.copy($scope.executionWindow);
				$scope.resetWeeklySchedules = angular.copy($scope.weeklySchedules);
				$scope.resetDailySchedules = angular.copy($scope.dailySchedules);
				$scope.resetValidity = angular.copy($scope.validity);
			}

			$scope.loadExecutionWindowSlots = function() {
				// loop through all execution windows and in
				// each execution window, loop through all
				// timeslots, for each timeslot add an element
				// to the schedule array
				if (!$scope.executionWindow.executionWindows) {
					$scope.executionWindow.executionWindows = [];
					$scope.executionWindow.scheduleType = 'D';
					$scope.initializeDailyTimeSlot();
					$scope.initializeWeeklyTimeSlot();
				}

				if ($scope.executionWindow.scheduleType === 'W') {
					$scope.weeklySchedules = [];
					$scope.initializeDailyTimeSlot();

					angular.forEach($scope.executionWindow.executionWindows, function(value, index) {

						angular.forEach(value.executionTimeSlots, function(timeSlot, index) {
							var days = {
								"sun" : false,
								"mon" : false,
								"tue" : false,
								"wed" : false,
								"thu" : false,
								"fri" : false,
								"sat" : false
							};
							angular.forEach(value.day, function(dayOfWeek, index) {
								days[generalService.getDayOfTheWeekMap()[dayOfWeek]] = true;
							});
							var start = $scope.parseTimeFromString(timeSlot.startTime);
							var end = $scope.parseTimeFromString(timeSlot.endTime);

							$scope.weeklySchedules.push({
								days : days,
								start : start,
								end : end,
								validEndTime : true
							})
						});

					});
				} else {
					$scope.dailySchedules = [];
					$scope.initializeWeeklyTimeSlot()
					angular.forEach($scope.executionWindow.executionWindows, function(value, index) {
						angular.forEach(value.executionTimeSlots, function(timeSlot, index) {
							var start = $scope.parseTimeFromString(timeSlot.startTime);
							var end = $scope.parseTimeFromString(timeSlot.endTime);

							$scope.dailySchedules.push({
								start : start,
								end : end,
								validEndTime : true
							})
						});
					});

				}
			}

			$scope.checkEndTime = function(schedule) {
				if (schedule.start && schedule.end) {
					if (schedule.start.getTime() < schedule.end.getTime()) {
						schedule.validEndTime = true;
					}
				}
			}

			// get daily or weekly schedule as text
			$scope.getScheduleAsText = function() {
				var returnedString = ""
				if ($scope.executionWindow.scheduleType === 'D') {
					returnedString += $filter('translate')('daily.label') + " "
					angular.forEach($scope.dailySchedules, function(slot, index) {
						if (index != 0) {
							returnedString += " " + $filter('translate')('and.label') + " ";
						}

						returnedString += $scope.parseTimeToString(slot.start, true);
						returnedString += "-";
						returnedString += $scope.parseTimeToString(slot.end, true);
					});
				} else {
					angular.forEach($scope.weeklySchedules, function(slot, index) {
						if (index != 0) {
							returnedString += " " + $filter('translate')('and.label') + " ";
						}

						var hasDay = false;

						angular.forEach(slot.days, function(value, key) {
							if (value) {
								hasDay = true;
								returnedString += $filter('translate')(key + ".label") + " ";
							}
						});
						if (!hasDay) {
							returnedString += "<" + $filter('translate')('week.days.alt') + ">";
						}
						returnedString += " ";
						returnedString += $scope.parseTimeToString(slot.start, true);
						returnedString += "-";
						returnedString += $scope.parseTimeToString(slot.end, true);
					})
				}
				return returnedString;
			}

			// initialize an array with one default element for
			// weekly timeslot
			$scope.initializeWeeklyTimeSlot = function() {
				var start = new Date();
				start.setHours(0);
				start.setMinutes(0);
				var end = new Date();
				end.setHours(8);
				end.setMinutes(0);
				$scope.weeklySchedules = [{
					days : {
						"sun" : false,
						"mon" : false,
						"tue" : false,
						"wed" : false,
						"thu" : false,
						"fri" : false,
						"sat" : false,
					},
					start : start,
					end : end,
					validEndTime : true
				}]
			}

			// initialize an array with one default element for
			// daily timeslot
			$scope.initializeDailyTimeSlot = function() {
				var start = new Date();
				start.setHours(0);
				start.setMinutes(0);
				var end = new Date();
				end.setHours(8);
				end.setMinutes(0);
				$scope.dailySchedules = [{
					start : start,
					end : end,
					validEndTime : true
				}]
			}

			if ($scope.executionWindowID == "create") {
				// if creating executionWindow, initialize
				// default values
				$scope.executionWindow = {
					"name" : null,
					"scheduleType" : "D",
				}
				$scope.validity.validFrom = new Date();
				$scope.validity.expiringOn = new Date();
				$scope.validity.expiringOnOption = "never";
				$scope.initializeWeeklyTimeSlot();
				$scope.initializeDailyTimeSlot();
				$scope.detailsFound = true;
				$scope.resetExecutionWindow = angular.copy($scope.executionWindow);
				$scope.isCreated = true;
			} else {

				// get from web service
				$scope.reloadExecutionWindow();
				$scope.isCreated = false;

			}

			$scope.backToExecutionWindowList = function(form) {
				if (!$scope.dataPristine()) {
					dialogService.confirm({
						msg : $filter('translate')('details.back.confirm'),
						ok : function() {
							$state.go("ExecutionWindow");
						}
					})
				} else {
					$state.go("ExecutionWindow");
				}

			}

			$scope.dataPristine = function() {
				if (!angular.equals($scope.executionWindow, $scope.resetExecutionWindow)) {
					return false;
				}

				if (!angular.equals($scope.dailySchedules, $scope.resetDailySchedules)) {
					return false;
				}

				if (!angular.equals($scope.weeklySchedules, $scope.resetWeeklySchedules)) {
					return false;
				}

				if (!angular.equals($scope.validity, $scope.resetValidity)) {
					return false;
				}

				return true;
			}

			// scrollTo functionalities
			$scope.scrollTo = function(target) {
				loggerService.getLogger().info("Scrolling to " + target);
				$location.hash(target);
				$anchorScroll();
				// $location.hash(target, '');
				currentTarget = target;
			}

			$scope.discardExecutionWindowChanges = function(form) {

				loggerService.getLogger().info("Discarding changes");
				$scope.executionWindow = angular.copy($scope.resetExecutionWindow);
				$scope.weeklySchedules = angular.copy($scope.resetWeeklySchedules);
				$scope.dailySchedules = angular.copy($scope.resetDailySchedules);
				$scope.validity = angular.copy($scope.resetValidity);
				form.$setPristine();
			}

			$scope.saveExecutionWindowChanges = function(form) {
				if (form.$invalid) {
					form.$setDirty();
					for ( var field in form) {
						if (field[0] == '$')
							continue;
						// console.log(field);
						form[field].$touched = true;
					}
					return;
				}

				// process validity

				if ($scope.validity.expiringOn != 0 && $scope.validity.validFrom.getTime() > $scope.validity.expiringOn.getTime()) {
					dialogService.notify({
						type : "sc-dialog-error",
						msg : $filter('translate')('executionWindow.editor.invalid.expiration.validation'),
						ok : function() {
							return;
						}
					});
					return;
				}

				$scope.executionWindow.effectiveFrom = $scope.validity.validFrom.getTime();

				if ($scope.validity.expiringOnOption == 'specific') {
					$scope.executionWindow.effectiveUntil = $scope.validity.expiringOn.getTime();
				} else {
					$scope.executionWindow.effectiveUntil = 0;
				}

				// clear existing timeslots
				$scope.executionWindow.executionWindows = [];

				// process timeslots

				loggerService.getLogger().debug($scope.executionWindow.scheduleType);
				if ($scope.executionWindow.scheduleType == 'D') {
					for (var index = 0; index < $scope.dailySchedules.length; index++) {
						var dailyTimeSlot = $scope.dailySchedules[index];

						if (dailyTimeSlot.start.getTime() > dailyTimeSlot.end.getTime()) {
							dailyTimeSlot.validEndTime = false;
							return;
						}

						var element = {
							"displayOrder" : index + 1,
							"day" : ["0", "1", "2", "3", "4", "5", "6"],
							"executionTimeSlots" : [{
								"displayOrder" : 1,
								"startTime" : $scope.parseTimeToString(dailyTimeSlot.start, false),
								"endTime" : $scope.parseTimeToString(dailyTimeSlot.end, false)
							}]
						}
						$scope.executionWindow.executionWindows.push(element);
					}
				} else {
					for (var index = 0; index < $scope.weeklySchedules.length; index++) {
						var weeklyTimeSlot = $scope.weeklySchedules[index];

						if (weeklyTimeSlot.start.getTime() > weeklyTimeSlot.end.getTime()) {
							weeklyTimeSlot.validEndTime = false;
							return;
						}

						var dayArray = [];
						angular.forEach(weeklyTimeSlot.days, function(value, key) {
							if (value == true) {
								dayArray.push(generalService.getDayOfTheWeekMap()[key]);
							}
						});
						var element = {
							"displayOrder" : index + 1,
							"day" : dayArray,
							"executionTimeSlots" : [{
								"displayOrder" : 1,
								"startTime" : $scope.parseTimeToString(weeklyTimeSlot.start, false),
								"endTime" : $scope.parseTimeToString(weeklyTimeSlot.end, false)
							}]
						}
						$scope.executionWindow.executionWindows.push(element);

					};

				}

				if ($scope.isCreated) {
					// if created, call add web service
					executionWindowService.createExecutionWindow($scope.executionWindow, function(response) {
						$state.go("ExecutionWindow");
						loggerService.getLogger().debug(response.message);
					})
				} else {
					// call modify web service
					executionWindowService.modifyExecutionWindow($scope.executionWindow, function(response) {
						$scope.copyResetObjects();
						loggerService.getLogger().debug(response.message);
					})
				}
				form.$setPristine();
			}
		}]);mainApp.controller('executionWindowListController', ['$scope', '$state', 'loggerService', '$stateParams', '$filter', 'sharedService', 'autoCloseOptionService', 'executionWindowService',
		'configService', 'dialogService', function($scope, $state, loggerService, $stateParams, $filter, sharedService, autoCloseOptionService, executionWindowService, configService, dialogService) {
			var PAGE_SIZE = configService.configObject['defaultExecutionWindowPageSize'];
			$scope.$parent.isDetailsPage = false;

			$scope.refreshExecutionWindowList = function() {
				$scope.executionWindowPageNumber = 1;
				$scope.total = 0;
				var sortFields = [];
				executionWindowService.getExecutionWindowList($scope.executionWindowPageNumber, sortFields, function(response) {
					$scope.executionWindowList = response.data;
					$scope.total = response.totalNoOfRecords;
					$scope.numberOfPage = ($scope.total % PAGE_SIZE == 0) ? $scope.total / PAGE_SIZE : $scope.total / PAGE_SIZE + 1;
					loggerService.getLogger().debug(response);
				});
			}

			$scope.refreshExecutionWindowList();

			$scope.loadMore = function() {
				var sortFields = [];
				$scope.executionWindowPageNumber++;
				loggerService.getLogger().info("Page number " + $scope.executionWindowPageNumber);
				executionWindowService.getExecutionWindowList($scope.executionWindowPageNumber, sortFields, function(response) {
					$scope.executionWindowList = $scope.executionWindowList.concat(response.data);
					$scope.total = response.totalNoOfRecords;
					$scope.numberOfPage = ($scope.total % PAGE_SIZE == 0) ? $scope.total / PAGE_SIZE : $scope.total / PAGE_SIZE + 1;
					loggerService.getLogger().debug(response);
				});
			}

			$scope.returnScheduleString = function(executionWindow) {
				return executionWindowService.createScheduleString(executionWindow);
			}

			$scope.createNewExecutionWindow = function() {
				loggerService.getLogger().info("Go to creating new execution window");
				$state.go('ExecutionWindowDetails', {
					id : 'create'
				})
			}

			$scope.openExecutionWindow = function(executionWindow) {
				loggerService.getLogger().info("Openning execution window set " + executionWindow.id);
				sharedService.data.executionWindowDetails = executionWindow;
				$state.go('ExecutionWindowDetails', {
					id : executionWindow.id
				});
			}

			$scope.deleteExecutionWindow = function(executionWindow, $event) {
				loggerService.getLogger().info("Deleting execution window set" + executionWindow.id);
				dialogService.confirm({
					msg : $filter('translate')('execution.window.del.confirm') + ": " + executionWindow.name + "?",
					ok : function() {
						executionWindowService.deleteExecutionWindow(executionWindow.id, executionWindow.modifiedOn, function(response) {
							$scope.refreshExecutionWindowList();
							loggerService.getLogger().debug(response);
						});
					}
				})
				$event.stopPropagation();
			}

			var executionWindowWithOpenOption = [];
			$scope.closeAllOpenOption = function() {
				if (executionWindowWithOpenOption.length > 0) {
					angular.forEach(executionWindowWithOpenOption, function(executionWindow) {
						loggerService.getLogger().debug("The execution window is = " + JSON.stringify(executionWindow));
						if (executionWindow.optionOpen)
							executionWindow.optionOpen = false;
					});
					executionWindowWithOpenOption = [];
				}
			}
			$scope.openOption = function(executionWindow, open, $event) {
				if (angular.isDefined(open)) {
					executionWindow.optionOpen = open;
					if (open) {
						$scope.closeAllOpenOption();
						autoCloseOptionService.close();
						autoCloseOptionService.registerOpen($scope, $scope.closeAllOpenOption);
						executionWindowWithOpenOption.push(executionWindow);
					} else {
						executionWindowWithOpenOption = [];
					}
				} else
					return angular.isDefined(executionWindow.optionOpen) ? executionWindow.optionOpen : false;
			};

			$scope.isOptionOpen = function(executionWindow) {
				if (executionWindow.optionOpen) {
					return executionWindow.optionOpen;
				} else {
					return false;
				}
			}

		}]);mainApp.factory('executionWindowService', [
		'networkService',
		'loggerService',
		'configService',
		'$filter',
		'statusCodeService',
		'generalService',
		function(networkService, loggerService, configService, $filter, statusCodeService, generalService) {

			var PAGE_SIZE = configService.configObject['defaultExecutionWindowPageSize'];
			var mapDayOftheWeek = generalService.getDayOfTheWeekMap();

			var getSortFields = function() {
				return [{
					label : $filter('translate')('executionWindow.sortby.name'),
					field : "name"
				}];
			}

			var createScheduleString = function(executionWindowSet) {
				var returnString = "";
				var executionWindows = executionWindowSet.executionWindows;

				for (var i = 0; i < executionWindows.length; i++) {
					if (i > 0) {
						returnString += ", "
					}
					var currentExecutionWindow = executionWindows[i];
					var currentExecutionWindowDay = currentExecutionWindow.day;
					if (executionWindowSet.scheduleType === "D") {
						returnString += $filter('translate')('daily.label');
					} else {
						for (var j = 0; j < currentExecutionWindowDay.length; j++) {
							returnString += $filter('translate')(mapDayOftheWeek[currentExecutionWindowDay[j]] + ".label") + " ";
						}
					}
					returnString += " " + currentExecutionWindow.executionTimeSlots[0].startTime.slice(0, 2) + ":" + currentExecutionWindow.executionTimeSlots[0].startTime.slice(2, 4) + "-"
							+ currentExecutionWindow.executionTimeSlots[0].endTime.slice(0, 2) + ":" + currentExecutionWindow.executionTimeSlots[0].endTime.slice(2, 4);

				}
				return returnString;
			}

			var getExecutionWindowList = function(pageNo, sortFields, callback) {
				loggerService.getLogger().info("Get execution window list of type " + " with page number " + pageNo + " and page size " + PAGE_SIZE);
				var requestData = {
					'sortFields' : sortFields,
					'pageNo' : pageNo,
					'pageSize' : PAGE_SIZE
				};

				networkService.post(configService.getUrl("executionWindow.list"), requestData, function(data) {
					statusCodeService.list("ExecutionWindow", callback, data);
				});
			}

			var getExecutionWindow = function(executionWindowID, callback) {
				loggerService.getLogger().info("Get execution window " + " with ID " + executionWindowID);

				loggerService.getLogger().debug(configService.getUrl("executionWindow.get") + executionWindowID);

				networkService.get(configService.getUrl("executionWindow.get") + executionWindowID, function(data) {
					statusCodeService.get("ExecutionWindow", callback, data);
				});

			}

			var modifyExecutionWindow = function(executionWindow, callback) {
				loggerService.getLogger().info("Modifying execution window " + executionWindow.id);

				var requestData = executionWindow;

				networkService.put(configService.getUrl("executionWindow.modify"), requestData, function(data) {
					statusCodeService.modify("ExecutionWindow", callback, data);
				});
			}

			var deleteExecutionWindow = function(id, lastModifiedDate, callback) {
				loggerService.getLogger().info("Deleting execution window " + id);

				networkService.del(configService.getUrl("executionWindow.delete") + id + "/" + lastModifiedDate, function(data) {
					statusCodeService.del("ExecutionWindow", callback, data);
				})
			}

			var createExecutionWindow = function(executionWindow, callback) {
				loggerService.getLogger().info("Creating execution window with details " + executionWindow);
				var requestData = executionWindow;
				networkService.post(configService.getUrl("executionWindow.add"), requestData, function(data) {
					statusCodeService.create("ExecutionWindow", callback, data);
				})
			}

			return {
				getExecutionWindowList : getExecutionWindowList,
				getExecutionWindow : getExecutionWindow,
				modifyExecutionWindow : modifyExecutionWindow,
				deleteExecutionWindow : deleteExecutionWindow,
				getSortFields : getSortFields,
				createScheduleString : createScheduleString,
				createExecutionWindow : createExecutionWindow,
			}

		}]);;mainApp.controller('generalSettingsController', ['$scope', '$state', 'loggerService', '$filter', 'generalSettingsService', 'configService',
		function($scope, $state, loggerService, $filter, generalSettingsService, configService) {
			$scope.$parent.isDetailsPage = false;
			$scope.isDirty = {};

			$scope.refreshGeneralSettings = function() {
				generalSettingsService.getSettingList(function(response) {
					$scope.settingList = response.data;
					$scope.resetSettingList = angular.copy($scope.settingList);
					loggerService.getLogger().debug(response);
				});
			}

			$scope.refreshGeneralSettings();

			$scope.modifyGeneralSetting = function(setting, field) {

				if (field.$invalid) {
					field.$dirty = true;
					field.$touched = true;
					return;
				}

				generalSettingsService.modifySetting(setting, function(response) {
					$scope.isDirty[setting.id] = false;
					$scope.resetSettingList = angular.copy($scope.settingList);
				})
			}

			$scope.onSettingChange = function(id) {
				$scope.isDirty[id] = true;
			}

			$scope.resetSettings = function() {
				$scope.settingList = angular.copy($scope.resetSettingList);
				$scope.isDirty = {};
			}

			$scope.saveAll = function(form) {
				if (form.$invalid) {
					form.$setDirty();
					for ( var field in form) {
						if (field[0] == '$')
							continue;
						// console.log(field);
						form[field].$touched = true;
						form[field].$dirty = true;
					}
					return;
				}

				var settings = [];
				if ($scope.settingList) {
					angular.forEach($scope.settingList, function(settingGroup, index) {
						if (settingGroup.systemConfigs) {
							angular.forEach(settingGroup.systemConfigs, function(setting, sindex) {
								settings.push(setting)
							});
						}
					})
				}
				generalSettingsService.modifyAllSettings(settings, function(response) {
					$scope.resetSettingList = angular.copy($scope.settingList);
					$scope.isDirty = {};
				})

			}

		}]);mainApp.factory('generalSettingsService', ['networkService', 'loggerService', 'configService', '$filter', 'statusCodeService',
		function(networkService, loggerService, configService, $filter, statusCodeService) {

			var getSettingList = function(callback) {
				loggerService.getLogger().info("Get general settings list");

				networkService.post(configService.getUrl("generalSettings.list"), null, function(data) {
					statusCodeService.list("General Settings", callback, data);
				});
			}

			var getSetting = function(settingID, callback) {
				loggerService.getLogger().info("Get setting" + " with ID " + settingID);

				networkService.get(configService.getUrl("generalSettings.get") + settingID, function(data) {
					statusCodeService.get("General Settings", callback, data);
				});

			}

			var modifySetting = function(setting, callback) {
				loggerService.getLogger().info("Modifying setting " + setting.id);

				var requestData = setting;

				networkService.put(configService.getUrl("generalSettings.modify"), requestData, function(data) {
					statusCodeService.modify("General Settings", callback, data)
				});
			}

			var modifyAllSettings = function(data, callback) {
				loggerService.getLogger().info("Modifying all settings");

				var requestData = data;
				networkService.put(configService.getUrl("generalSettings.modifyAll"), requestData, function(data) {
					statusCodeService.modify("General Settings", callback, data)
				})
			}

			return {
				getSettingList : getSettingList,
				getSetting : getSetting,
				modifySetting : modifySetting,
				modifyAllSettings : modifyAllSettings
			}

		}]);;mainApp.controller('jmsDetailsController', ['$scope', '$state', '$location', 'loggerService', '$window', '$stateParams', '$filter', 'dialogService', 'jmsService', '$anchorScroll',
		function($scope, $state, $location, loggerService, $window, $stateParams, $filter, dialogService, jmsService, $anchorScroll) {
			$scope.$parent.isDetailsPage = true;
			$scope.jmsID = $stateParams.id;
			$scope.jmsTypes = ["Q", "T"];

			// reload jms
			$scope.reloadJMS = function() {

				jmsService.getJMS($scope.jmsID, function(response) {
					$scope.jms = response.data;
					$scope.resetJMS = angular.copy($scope.jms);
					loggerService.getLogger().debug($scope.jms);
					if (!$scope.jms) {
						$scope.detailsFound = false;
					} else {
						$scope.detailsFound = true;
					}
				})
			}

			if ($scope.jmsID == "create") {
				// if creating jms, initialize default values
				$scope.jms = {
					"displayName" : null,
					"description" : "JMS for sending document extraction information to extractor.",
					"type" : "Q",
					"providerURL" : null,
					"initialContextFactory" : null,
					"URLPackagePrefix" : null,
					"connectionFactor" : null,
					"serviceName" : null,
					"connectionRetryInterval" : 5,
				}
				$scope.detailsFound = true;
				$scope.resetJMS = angular.copy($scope.jms);
				$scope.isCreated = true;
			} else {

				// get from web service
				$scope.reloadJMS();
				$scope.isCreated = false;

			}

			$scope.backToJMSList = function(form) {
				if (!angular.equals($scope.jms, $scope.resetJMS)) {
					dialogService.confirm({
						msg : $filter('translate')('details.back.confirm'),
						ok : function() {
							$state.go("JMS");
						}
					})
				} else {
					$state.go("JMS");
				}
			}

			// scrollTo functionalities
			$scope.scrollTo = function(target) {
				$location.hash(target);
				$anchorScroll();
				// $location.hash(target, '');
				currentTarget = target;
			}

			$scope.discardJMSChanges = function(form) {
				loggerService.getLogger().info("Discarding changes");
				$scope.jms = angular.copy($scope.resetJMS);
				form.$setPristine();
			}

			$scope.changeJMSType = function(jmsType) {
				$scope.jms.type = jmsType;
			}

			$scope.saveJMSChanges = function(form) {
				// to be implemented

				if (form.$invalid) {
					form.$setDirty();
					for ( var field in form) {
						if (field[0] == '$')
							continue;
						// console.log(field);
						form[field].$touched = true;
					}
					return;
				}

				if ($scope.isCreated) {
					// if created, call add web service
					jmsService.createJMS($scope.jms, function(response) {
						$state.go("JMS");
						loggerService.getLogger().debug(response.message);
					})
				} else {
					// call modify web service
					jmsService.modifyJMS($scope.jms, function(response) {
						$scope.resetJMS = angular.copy($scope.jms);
						loggerService.getLogger().debug(response.message);
					})
				}
				form.$setPristine();
			}
		}]);mainApp.controller('jmsListController', ['$scope', '$state', 'loggerService', '$stateParams', '$filter', 'autoCloseOptionService', 'jmsService', 'configService', 'dialogService',
		function($scope, $state, loggerService, $stateParams, $filter, autoCloseOptionService, jmsService, configService, dialogService) {
			var PAGE_SIZE = configService.configObject['defaultJMSPageSize'];
			$scope.$parent.isDetailsPage = false;

			$scope.refreshJMSList = function() {
				$scope.jmsPageNumber = 1;
				$scope.total = 0;
				var sortFields = [];
				jmsService.getJMSList($scope.jmsPageNumber, sortFields, function(response) {
					$scope.jmsList = response.data;
					$scope.total = response.totalNoOfRecords;
					$scope.numberOfPage = ($scope.total % PAGE_SIZE == 0) ? $scope.total / PAGE_SIZE : $scope.total / PAGE_SIZE + 1;
					loggerService.getLogger().debug(JSON.stringify(response));
				});
			}

			$scope.refreshJMSList();

			$scope.loadMore = function() {
				var sortFields = [];
				$scope.jmsPageNumber++;
				loggerService.getLogger().info("Page number " + $scope.jmsPageNumber);
				jmsService.getJMSList($scope.jmsPageNumber, sortFields, function(response) {
					$scope.jmsList = $scope.jmsList.concat(response.data);
					$scope.total = response.totalNoOfRecords;
					$scope.numberOfPage = ($scope.total % PAGE_SIZE == 0) ? $scope.total / PAGE_SIZE : $scope.total / PAGE_SIZE + 1;
					loggerService.getLogger().debug(JSON.stringify(response));
				});
			}

			$scope.createNewJMS = function() {
				loggerService.getLogger().info("Go to creating new jms");
				$state.go('JMSDetails', {
					id : 'create'
				})
			}

			$scope.openJMS = function(jms) {
				loggerService.getLogger().info("Openning jms " + jms.id);
				$state.go('JMSDetails', {
					id : jms.id
				});
			}

			$scope.deleteJMS = function(jms, $event) {
				loggerService.getLogger().info("Deleting jms " + jms.id);
				dialogService.confirm({
					msg : $filter('translate')('jms.del.confirm') + ": " + jms.displayName + "?",
					ok : function() {
						jmsService.deleteJMS(jms.id, jms.modifiedOn, function(response) {
							$scope.refreshJMSList();
							loggerService.getLogger().debug(JSON.stringify(response));
						});
					}
				})
				$event.stopPropagation();
			}

			var jmsWithOpenOption = [];
			$scope.closeAllOpenOption = function() {
				if (jmsWithOpenOption.length > 0) {
					angular.forEach(jmsWithOpenOption, function(jms) {
						loggerService.getLogger().debug("The JMS is = " + JSON.stringify(jms));
						if (jms.optionOpen)
							jms.optionOpen = false;
					});
					jmsWithOpenOption = [];
				}
			}
			$scope.openOption = function(jms, open, $event) {
				if (angular.isDefined(open)) {
					jms.optionOpen = open;
					if (open) {
						$scope.closeAllOpenOption();
						autoCloseOptionService.close();
						autoCloseOptionService.registerOpen($scope, $scope.closeAllOpenOption);
						jmsWithOpenOption.push(jms);
					} else {
						jmsWithOpenOption = [];
					}
				} else
					return angular.isDefined(jms.optionOpen) ? jms.optionOpen : false;
			};

			$scope.isOptionOpen = function(jms) {
				if (jms.optionOpen) {
					return jms.optionOpen;
				} else {
					return false;
				}
			}

		}]);mainApp.factory('jmsService', ['networkService', 'loggerService', 'configService', '$filter', 'statusCodeService', function(networkService, loggerService, configService, $filter, statusCodeService) {

	var PAGE_SIZE = configService.configObject['defaultJMSPageSize'];

	var getSortFields = function() {
		return [{
			label : $filter('translate')('jms.sort.by.name'),
			field : "displayName"
		}];
	}

	var getJMSList = function(pageNo, sortFields, callback) {
		loggerService.getLogger().info("Get jms list of type " + " with page number " + pageNo + " and page size " + PAGE_SIZE);
		var requestData = {
			'sortFields' : sortFields,
			'pageNo' : pageNo,
			'pageSize' : PAGE_SIZE
		};

		networkService.post(configService.getUrl("jms.list"), requestData, function(data) {
			statusCodeService.list("JMSProfile", callback, data);
		});
	}

	var createJMS = function(jms, callback) {
		loggerService.getLogger().info("Creating jms with details " + jms);
		var requestData = jms;
		networkService.post(configService.getUrl("jms.add"), requestData, function(data) {
			statusCodeService.create("JMSProfile", callback, data);
		})
	}

	var getJMS = function(jmsID, callback) {
		loggerService.getLogger().info("Get jms" + " with ID " + jmsID);

		loggerService.getLogger().debug(configService.getUrl("jms.get") + jmsID);

		networkService.get(configService.getUrl("jms.get") + jmsID, function(data) {
			statusCodeService.get("JMSProfile", callback, data);
		});

	}

	var modifyJMS = function(jms, callback) {
		loggerService.getLogger().info("Modifying jms " + jms.id);

		var requestData = jms;

		networkService.put(configService.getUrl("jms.modify"), requestData, function(data) {
			statusCodeService.modify("JMSProfile", callback, data)
		});
	}

	var deleteJMS = function(id, lastModifiedDate, callback) {
		loggerService.getLogger().info("Deleting JMS profile " + id);

		networkService.del(configService.getUrl("jms.delete") + id + "/" + lastModifiedDate, function(data) {
			loggerService.getLogger().debug("jms.delete call back");
			statusCodeService.del("JMSProfile", callback, data);
		})
	}

	return {
		getJMSList : getJMSList,
		getJMS : getJMS,
		modifyJMS : modifyJMS,
		deleteJMS : deleteJMS,
		getSortFields : getSortFields,
		createJMS : createJMS
	}

}]);;mainApp.controller('licenseController', ['$scope', 'loggerService', '$filter', 'summaryService', function($scope, loggerService, $filter, summaryService) {

	$scope.$parent.isDetailsPage = false;

	$scope.getLicenseInformation = function() {

		summaryService.getSummary("document", function(response) {
			$scope.documentSummary = response.data;
			$scope.licenseFound = true;
			$scope.loadLicenseInfo();

		});
	}

	$scope.getLicenseInformation();

	$scope.loadLicenseInfo = function() {

		for (var i = 0; i < $scope.documentSummary.length; i++) {
			if ($scope.documentSummary[i].value) {
				if ($scope.documentSummary[i].code == "Data size") {
					$scope.dataSize = Number($scope.documentSummary[i].value);
					continue;
				}
				if ($scope.documentSummary[i].code == "License expiry date") {
					$scope.expiryDate = new Date($scope.documentSummary[i].value);
					loggerService.getLogger().debug(JSON.stringify($scope.expiryDate));
					continue;
				}
				if ($scope.documentSummary[i].code == "Used size") {
					$scope.usedSize = Number($scope.documentSummary[i].value) / 1024 / 1024 / 1024;
					$scope.usedSize = $scope.usedSize.toFixed(2)
					loggerService.getLogger().debug($scope.usedSize);
					continue;
				}
			}
		}

		if ($scope.expiryDate == undefined || $scope.expiryDate == null || $scope.dataSize == undefined || $scope.usedSize == undefined) {

			$scope.licenseFound = false;
			return;
		}

	}

	$scope.getLicenseRemainingDays = function() {
		var oneDay = 24 * 60 * 60 * 1000;
		var today = new Date();
		if ($scope.expiryDate) {
			return Math.round(($scope.expiryDate - today.getTime()) / (oneDay));
		} else {
			return 0;
		}
	}

	$scope.getRemaining = function() {
		return ($scope.dataSize - $scope.usedSize).toFixed(2);
	}

	$scope.getRemainingClass = function() {
		if ($scope.getUsedSizeStyle() === 'success') {
			return "sc-green";
		}

		if ($scope.getUsedSizeStyle() === 'danger') {
			return "sc-red";
		}

		if ($scope.getUsedSizeStyle() === 'warning') {
			return "sc-orange";
		}
	}

	$scope.getExpiryClass = function() {
		if ($scope.getLicenseRemainingDays() >= 180) {
			return "sc-green";
		}

		if ($scope.getLicenseRemainingDays() <= 0) {
			return "sc-red";
		}

		if ($scope.getLicenseRemainingDays() < 180) {
			return "sc-orange";
		}
	}

	$scope.getUsedSizeStyle = function() {

		if ($scope.usedSize / $scope.dataSize < 0.5) {
			return "success";
		}

		if ($scope.usedSize / $scope.dataSize < 0.75) {
			return "warning";
		}

		if ($scope.usedSize / $scope.dataSize <= 1) {
			return "danger";
		}

		if ($scope.usedSize / $scope.dataSize > 1) {
			return "danger";
		}

	}

}]);mainApp.controller('pluginDetailsController', ['$scope', '$state', '$location', 'loggerService', '$stateParams', '$filter', 'dialogService', 'pluginService', 'generalService', '$anchorScroll',
		function($scope, $state, $location, loggerService, $stateParams, $filter, dialogService, pluginService, generalService, $anchorScroll) {
			$scope.$parent.isDetailsPage = true;
			$scope.pluginsID = $stateParams.id;

			$scope.changeBooleanValue = function(bool, paramIndex) {
				loggerService.getLogger().info("Boolean value is now = " + bool);
				loggerService.getLogger().info("Parameter is " + $scope.plugins.params[paramIndex].label);
				$scope.plugins.params[paramIndex].value = bool;
				loggerService.getLogger().debug(JSON.stringify($scope.plugins.params));
			}

			$scope.dateValuePopup = {
				opened : false
			}

			$scope.dateValueOpened = function() {
				$scope.dateValuePopup.opened = true;
			}

			$scope.reloadPlugin = function() {

				pluginService.getPlugin($scope.pluginsID, function(response) {
					$scope.plugins = response.data;
					$scope.resetPlugin = angular.copy($scope.plugins);
					loggerService.getLogger().debug(JSON.stringify($scope.plugins));
					if (!$scope.plugins) {
						$scope.detailsFound = false;
					} else {
						$scope.detailsFound = true;
					}
				})

			}

			$scope.reloadPlugin();

			$scope.backToPluginsList = function(form) {
				if (!angular.equals($scope.plugins, $scope.resetPlugin)) {
					dialogService.confirm({
						msg : $filter('translate')('details.back.confirm'),
						ok : function() {
							$state.go("Plugins");
						}
					})
				} else {
					$state.go("Plugins");
				}
			}

			// scrollTo functionalities
			$scope.scrollTo = function(target) {
				$location.hash(target);
				$anchorScroll();
				// $location.hash(target, '');
				currentTarget = target;
			}

			$scope.discardPluginChanges = function(form) {
				loggerService.getLogger().log("Discarding changes");
				$scope.plugins = angular.copy($scope.resetPlugin);
				form.$setPristine();
			}

			$scope.savePluginChanges = function(form) {
				// to be implemented

				if (form.$invalid) {
					form.$setDirty();
					for ( var field in form) {
						if (field[0] == '$')
							continue;
						// console.log(field);
						form[field].$touched = true;
						form[field].$dirty = true;
					}
					return;
				}

				// call modify web service
				pluginService.modifyPlugin($scope.plugins, function(response) {
					$scope.resetPlugin = angular.copy($scope.plugins);
					loggerService.getLogger().log(response.message);
				})
				form.$setPristine();
			}

			$scope.booleanValues = generalService.getBooleanValuesArray();
			loggerService.getLogger().log("scope.booleanvalues = " + JSON.stringify($scope.booleanValues));
		}]);mainApp.controller('pluginListController', ['$scope', '$state', 'loggerService', '$stateParams', '$filter', 'sharedService', 'autoCloseOptionService', 'configService', 'pluginService',
		function($scope, $state, loggerService, $stateParams, $filter, sharedService, autoCloseOptionService, configService, pluginService) {

			var PAGE_SIZE = configService.configObject['defaultPluginsPageSize'];

			$scope.$parent.isDetailsPage = false;

			$scope.refreshPluginsList = function() {
				$scope.pluginsPageNumber = 1;
				$scope.total = 0;
				var sortFields = [{"field":"displayName", "order":"asc"}];
				pluginService.getPluginList($scope.pluginsPageNumber, sortFields, function(response) {
					$scope.pluginsList = response.data;
					$scope.total = response.totalNoOfRecords;
					$scope.numberOfPage = ($scope.total % PAGE_SIZE == 0) ? $scope.total / PAGE_SIZE : $scope.total / PAGE_SIZE + 1;
					loggerService.getLogger().debug(JSON.stringify(response));
				});
			}

			$scope.refreshPluginsList();

			$scope.loadMore = function() {
				var sortFields = [];
				$scope.pluginsPageNumber++;
				loggerService.getLogger().log("Page number " + $scope.pluginsPageNumber);
				pluginService.getPluginList($scope.pluginsPageNumber, sortFields, function(response) {
					$scope.pluginsList = $scope.pluginsList.concat(response.data);
					$scope.total = response.totalNoOfRecords;
					$scope.numberOfPage = ($scope.total % PAGE_SIZE == 0) ? $scope.total / PAGE_SIZE : $scope.total / PAGE_SIZE + 1;
					loggerService.getLogger().debug(JSON.stringify(response));
				});
			}

			$scope.openOption = function(plugins, open, $event) {
				if (angular.isDefined(open)) {
					plugins.optionOpen = open;
					if (open) {
						$scope.closeAllOpenOption();
						autoCloseOptionService.close();
						autoCloseOptionService.registerOpen($scope, $scope.closeAllOpenOption);
						pluginsWithOpenOption.push(plugins);
					} else {
						pluginsWithOpenOption = [];
					}
				} else
					return angular.isDefined(plugins.optionOpen) ? plugins.optionOpen : false;
			};

			$scope.openPlugin = function(plugins) {
				loggerService.getLogger().info("Opening plugin " + plugins.id);
				sharedService.data.pluginDetails = plugins;
				$state.go('PluginDetails', {
					id : plugins.id
				});
			}

			$scope.isOptionOpen = function(plugins) {
				if (plugins.optionOpen) {
					return plugins.optionOpen;
				} else {
					return false;
				}
			}

			$scope.getDateFormat = function() {
				loggerService.getLogger().log(configService.configObject['date.format']);
				return configService.configObject['date.format']
			}

			var pluginsWithOpenOption = [];
			$scope.closeAllOpenOption = function() {
				if (pluginsWithOpenOption.length > 0) {
					angular.forEach(pluginsWithOpenOption, function(plugins) {
						loggerService.getLogger().log("The plugins object = " + JSON.stringify(plugins))
						if (plugins.optionOpen)
							plugins.optionOpen = false;
					});
					pluginsWithOpenOption = [];
				}
			}
		}]);mainApp.factory('pluginService', ['networkService', 'loggerService',

'configService', '$filter', 'statusCodeService', 'collectionService', function(networkService, loggerService, configService, $filter, statusCodeService, collectionService) {

	var PAGE_SIZE = configService.configObject['defaultPluginsPageSize'];

	var getSortFields = function() {
		return [{
			label : $filter('translate')('plugins.sort.by.name'),
			field : "name",
			order : "asc"
		}];
	}

	var getPluginList = function(pageNo, sortFields, callback) {
		loggerService.getLogger().info("Get plugin list of type " + " with page number " + pageNo + " and page size " + PAGE_SIZE);
		var requestData = {
			'sortFields' : sortFields,
			'pageNo' : pageNo,
			'pageSize' : PAGE_SIZE
		};

		networkService.post(configService.getUrl("plugins.list"), requestData, function(data) {
			statusCodeService.list("Plugins", callback, data);
		});
	}

	var getPlugin = function(pluginID, callback) {
		loggerService.getLogger().info("Get plugin" + " with ID " + pluginID);

		loggerService.getLogger().debug(configService.getUrl("plugins.get") + pluginID);

		networkService.get(configService.getUrl("plugins.get") + pluginID, function(data) {
			statusCodeService.get("Plugins", callback, data);
		});

	}

	var modifyPlugin = function(plugins, callback) {
		loggerService.getLogger().info("Modifying plugin " + plugins.id);

		var requestData = plugins;

		networkService.put(configService.getUrl("plugins.modify"), requestData, function(data) {
			statusCodeService.modify("Plugins", callback, data)
		});
	}

	return {
		getPluginList : getPluginList,
		getPlugin : getPlugin,
		modifyPlugin : modifyPlugin,
		getSortFields : getSortFields
	}

}]);;mainApp.controller('appController', ['$scope', 'networkService', 'configService', 'loggerService', '$location', '$templateCache', 'sharedService', '$filter', '$state',
		function($scope, networkService, configService, loggerService, $location, $templateCache, sharedService, $filter, $state) {

			configService.setConfig(MainAppConfig);

			$scope.tabs = [{
				title : 'TAB.Overview',
				url : 'overview',
				finalUrl : 'Overview',
				icon : "fa-bar-chart"
			}, {
				title : 'TAB.Rules',
				url : 'rules',
				finalUrl : 'Rules',
				icon : "fa-file-text-o"
			}, {
				title : 'TAB.SCServices',
				url : 'scservices',
				icon : "fa-qrcode",
				children : [{
					title : 'TAB.SCServices.Watchers',
					url : 'scservices({type:"watcher"})',
					finalUrl : 'Services/watcher',
					icon : "fa-eye"
				}, {
					title : 'TAB.SCServices.Extractors',
					url : 'scservices({type:"extractor"})',
					finalUrl : 'Services/extractor',
					icon : "fa-external-link"
				}, {
					title : 'TAB.SCServices.RuleEngine',
					url : 'scservices({type:"ruleEngine"})',
					finalUrl : 'Services/ruleEngine',
					icon : "fa-tasks"
				}]
			}, {
				title : 'TAB.IndexDatabaseQuery',
				url : 'indexDatabaseQuery({id:"custom"})',
				finalUrl : "IndexDatabaseQuery",
				icon : "fa-database"
			}, {
				title : 'TAB.Settings',
				url : 'settings',
				icon : "fa-gears",
				children : [{
					title : 'TAB.Settings.General',
					url : 'GeneralSettings',
					finalUrl : 'Settings/General',
					icon : "fa-gear"
				}, {
					title : 'TAB.Settings.ExecutionWindow',
					url : 'ExecutionWindow',
					finalUrl : 'Settings/ExecutionWindow',
					icon : "fa-toggle-right"
				}, {
					title : 'TAB.Settings.Plugins',
					url : 'Plugins',
					finalUrl : 'Settings/Plugins',
					icon : "fa-puzzle-piece"
				}, {
					title : 'TAB.Settings.JMS',
					url : 'JMS',
					finalUrl : 'Settings/MessagingService',
					icon : "fa-inbox"
				}, {
					title : 'TAB.Settings.License',
					url : 'License',
					finalUrl : 'Settings/License',
					icon : "fa-certificate"
				}]
			}];

			var url = $location.url();
			if (url.indexOf('/') == 0)
				url = url.substring(1);
			if (url[url.length - 1] == '/')
				url = url.substring(0, url.length - 1);
			var findAndSet = function(parent, tab) {
				if (!tab.children) {
					if (tab.finalUrl && url.indexOf(tab.finalUrl) == 0 || tab.url && url.indexOf(tab.url) == 0) {
						if (parent)
							parent.expanded = true;
						$scope.currentTab = tab.url;
					}
				} else {
					tab.expanded = false;
					angular.forEach(tab.children, function(childTab) {
						if (findAndSet(tab, childTab)) {
							tab.expanded = true
						}
					})
				}
			}

			for (var i = 0; i < $scope.tabs.length; i++) {
				findAndSet(undefined, $scope.tabs[i]);
			}
			/*
			 * angular.forEach($scope.tabs, function(tab) {
			 * findAndSet(undefined, tab) });
			 */

			$scope.onClickTab = function(tab) {
				$scope.currentTab = tab.url;
			}

			$scope.isActiveTab = function(tabUrl) {
				return $scope.currentTab == tabUrl
			}

			$scope.$on('$locationChangeStart', function(next, current) {
				url = current.substring(current.indexOf('#') + 2)
				angular.forEach($scope.tabs, function(tab) {
					findAndSet(undefined, tab)
				});
			})

			$scope.isDetailsPage = false;

			$scope.getMenuClass = function() {
				if ($scope.isDetailsPage) {
					return "hide";
				} else {
					return "col-xs-4 col-sm-4 col-md-4"
				}
			}

			$scope.getMainContentClass = function() {
				if ($scope.isDetailsPage) {
					return "col-xs-12 col-sm-12 col-md-12";
				} else {
					return "col-xs-8 col-sm-8 col-md-8"
				}
			}

			$scope.getTooltipMessage = function(field) {
				var message = "";
				if (!field) {
					return "";
				};
				if (field.$valid) {
					return '';
				} else {
					if (field.$error.minlength) {
						message += $filter('translate')('component.minlength.validation') + "; ";
					}
					if (field.$error.maxlength) {
						message += $filter('translate')('component.maxlength.validation') + "; ";
					}
					if (field.$error.email) {
						message += $filter('translate')('component.email.validation') + "; ";
					}
					if (field.$error.required) {
						message += $filter('translate')('component.required.validation') + "; ";
					}
					message = message.slice(0, message.length - 2);
					return message;
				}
			}

			$scope.parseTimeFromString = function(timeString) {
				if (!timeString) {
					return "";
				}
				var date = new Date();
				date.setHours(parseInt(timeString.slice(0, 2)));
				date.setMinutes(parseInt(timeString.slice(2, 4)));
				return date;
			}

			$scope.parseTimeToString = function(date, withSeparator) {
				if (!date) {
					return "";
				}
				var hour = date.getHours();
				var hourString = hour.toString();
				var min = date.getMinutes();
				var minString = min.toString();
				if (hour < 10) {
					hourString = "0" + hourString;
				}

				if (min < 10) {
					minString = "0" + minString;
				}
				if (withSeparator) {
					return hourString + ":" + minString;
				} else {
					return hourString + minString;
				}
			}

			$scope.abs = function(number) {
				return Math.abs(number);
			}

			$scope.doughnutChartOption = {
				cutoutPercentage : 85,
				animationEasing : "easeOutQuad"

			}

			$scope.pieChartOption = {
				animationEasing : "easeOutQuad"
			}

			$scope.getDateFormat = function() {
				loggerService.getLogger().debug("The date format is  = " + configService.configObject['date.format']);
				return configService.configObject['date.format']
			}

			$scope.serviceChartColors = ['#5CB85C', '#F0AD4E', '#D9534F', '#222222', '#FDB45C', '#949FB1', '#4D5360'];

			$scope.processChartColors = ['#1F4392', '#444444'];

			$scope.getDateFromLong = function(long) {
				return new Date(long);
			}

			$scope.goHome = function() {
				loggerService.getLogger().debug("AppController.js : Inside goHome()");
				$state.go('overview');
			}

			loggerService.getLogger().debug("Log level is " + configService.configObject.logLevel);

		}]);
;angular.module('mainApp').directive('friendlyDate', ['$filter', function($filter) {
  return {
    scope: {
      date: '@',
      prefix: '@',
      fullFormat: '@',
      shortFormat: '@',
      titleClass: '@',
      contentClass: '@',
      dateType: '@',
    },
    template: "<p class=\"{{titleClass}}\">{{title}}</p>\
     <p class=\"{{contentClass}}\">{{content}}</p>",
    link: function(scope, element, attrs) {
      var prefix = scope.prefix;
      var date = null;
      date = new Date(parseInt(scope.date));
      // var date = new Date(Date.parse(scope.date));
      var now = new Date();
      var title = '';
      var content = '';
      if (prefix) title = prefix;
      if (now.getFullYear() == date.getFullYear() && now.getMonth() == date.getMonth() && now.getDate() == date.getDate()) {
        // today
        var nowMS = now.getTime();
        var updateTimeMS = date.getTime();
        if (nowMS - updateTimeMS > 3600 * 1000) {
          var hrPassed = parseInt((nowMS - updateTimeMS) / (3600 * 1000));
          content = hrPassed + ' ' + (hrPassed == 1 ? 'hour' : 'hours') + ' ago'
        } else if (nowMS - updateTimeMS > 60 * 1000) {
          var minPassed = parseInt((nowMS - updateTimeMS) / (60 * 1000));
          content = minPassed + ' ' + (minPassed == 1 ? 'min' : 'mins') + ' ago'
        } else {
          content = 'a moment ago';
        }
      } else {
        var yesterday = new Date();
        yesterday.setDate(now.getDate() - 1);
        if (now.getFullYear() == date.getFullYear() && now.getMonth() == date.getMonth() && now.getDate() == date.getDate() + 1) {
          // yesterday
          content = 'yesterday, ' + $filter('date')(date, scope.shortFormat);
        } else {
          content = $filter('date')(date, scope.fullFormat)
        }
      }
      scope.title = title;
      scope.content = content;
      // loggerService.getLogger().log(scope.content);
    }
  };
}]);;angular.module('mainApp').directive('httpLoader', ['$http', function($http) {
	return {
		restrict : 'A',
		link : function(scope, element, attrs) {
			scope.isLoading = function() {
				return $http.pendingRequests.length > 0;
			};
			scope.$watch(scope.isLoading, function(value) {
				if (value) {
					element.removeClass('ng-hide');
				} else {
					element.addClass('ng-hide');
				}
			});
		}
	};
}]);;angular.module('mainApp').directive('multiParam', function() {
	return {
		require : "^form",
		restrict : 'E',
		scope : {
			inputTags : '=paramlist',
			autocomplete : '=autocomplete'
		},
		link : function($scope, element, attrs, formCtrl) {
			$scope.form = formCtrl;
			$scope.defaultWidth = 200;
			$scope.tagText = '';
			$scope.placeholder = attrs.placeholder;
			$scope.inputType = attrs.inputType;
			$scope.inputRequired = attrs.inputRequired;
			$scope.name = attrs.name;
			$scope.invalidInput = false;
			$scope.duplicateInput = false;
			$scope.emailPattern = "^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";
			$scope.resetPlaceholder = angular.copy($scope.placeholder);
			$scope.inputColor = 'black';
			$scope.duplicateMap = {};
			if ($scope.autocomplete) {
				$scope.autocompleteFocus = function(event, ui) {
					$(element).find('input').val(ui.item.value);
					return false;
				};
				$scope.autocompleteSelect = function(event, ui) {
					$scope.$apply('tagText=\'' + ui.item.value + '\'');
					$scope.$apply('addTag()');
					return false;
				};
				$(element).find('input').autocomplete({
					minLength : 0,
					source : function(request, response) {
						var item;
						return response(function() {
							var i, len, ref, results;
							ref = $scope.autocomplete;
							results = [];
							for (i = 0, len = ref.length; i < len; i++) {
								if (window.CP.shouldStopExecution(1)) {
									break;
								}
								item = ref[i];
								if (item.toLowerCase().indexOf(request.term.toLowerCase()) !== -1) {
									results.push(item);
								}
							}
							window.CP.exitedLoop(1);
							return results;
						}());
					},
					focus : function(_this) {
						return function(event, ui) {
							return $scope.autocompleteFocus(event, ui);
						};
					}(this),
					select : function(_this) {
						return function(event, ui) {
							return $scope.autocompleteSelect(event, ui);
						};
					}(this)
				});
			}
			$scope.tagArray = function() {
				if (!$scope.tagText || $scope.tagText.length === 0) {
					$scope.invalidInput = false;
					$scope.duplicateInput = false;
				}
				if ($scope.inputTags === undefined) {
					$scope.inputWidth = '100%';
					return [];
				} else {
					if ($scope.inputTags.length > 0) {
						$scope.inputWidth = 200;
						$scope.placeholder = '';
						if (Object.keys($scope.duplicateMap).length == 0) {
							for (var i = 0; i < $scope.inputTags.length; i++) {
								$scope.duplicateMap[$scope.inputTags[i].value] = true;
							}
						}
					} else {
						$scope.inputWidth = '100%';
						$scope.placeholder = angular.copy($scope.resetPlaceholder);

					}
					return $scope.inputTags;
				}
			};
			$scope.addTag = function() {
				console.debug("Adding tag");
				var tagArray;
				if (!$scope.tagText || $scope.tagText.length === 0) {
					console.debug("Tag length = 0. Skip");
					return;
				}
				tagArray = $scope.tagArray();
				if ($scope.duplicateMap[$scope.tagText]) {
					$scope.duplicateInput = true;
					console.debug("Duplicate input!");
					return;
				} else {
					$scope.duplicateInput = false;
				}

				if ($scope.inputType === "Email") {
					if (!$scope.tagText.match($scope.emailPattern)) {
						$scope.invalidInput = true;
						console.debug("Invalid email");
						return;
					} else {
						$scope.invalidInput = false;
					}
				}

				if (isNaN($scope.tagText)) {
					if ($scope.inputType === "Number" || $scope.inputType === "Integer") {
						$scope.invalidInput = true;
						console.debug("Invalid number");
						return;
					}
				} else {
					if ($scope.inputType === "Integer") {
						if (Number($scope.tagText) % 1 != 0) {
							$scope.invalidInput = true;
							console.debug("Invalid integer");
							return;
						}
					}
				}

				tagArray.push({
					"value" : $scope.tagText
				});
				$scope.duplicateMap[$scope.tagText] = true;
				/* $scope.inputTags = tagArray.join(','); */
				$scope.inputColor = 'black';
				console.debug($scope.duplicateMap);
				return $scope.tagText = '';
			};
			$scope.deleteTag = function(key) {
				console.debug("Deleting tag");
				var tagArray;
				tagArray = $scope.tagArray();
				if (tagArray.length > 0 && $scope.tagText.length === 0 && key === undefined) {
					$scope.duplicateMap[tagArray[tagArray.length - 1].value] = false;
					tagArray.pop();
				} else {
					if (key !== undefined) {
						$scope.duplicateMap[tagArray[key].value] = false;
						tagArray.splice(key, 1);
					}
				}
				console.debug($scope.duplicateMap);
				return tagArray;
			};
			$scope.$watch('tagText', function(newVal, oldVal) {
				$scope.inputColor = "black";
				var tempEl;
				if (!(newVal === oldVal && newVal === undefined)) {
					tempEl = $('<span>' + newVal + '</span>').appendTo('body');
					$scope.inputWidth = tempEl.width() + 5;
					if ($scope.inputWidth < $scope.defaultWidth) {
						$scope.inputWidth = $scope.defaultWidth;
					}
					return tempEl.remove();
				}
			});
			element.bind('keydown', function(e) {
				var key;
				key = e.which;
				if (key === 9 || key === 13) {
					e.preventDefault();
				}
				if (key === 8) {
					return $scope.$apply('deleteTag()');
				}
			});
			return element.bind('keyup', function(e) {
				var key;
				key = e.which;
				if (key === 9 || key === 13) {
					e.preventDefault();
					return $scope.$apply('addTag()');
				}
			});
		},
		templateUrl : "ui/app/templates/multiParam.html",
	};
});mainApp.factory('autoCloseOptionService', ['$document', '$rootScope', function($document, $rootScope) {
	var openScope = null;
	var closeFunction = null;

	var registerOpen = function(targetScope, targetCloseFunction) {
		if (!openScope) {
			setTimeout(function() {
				$document.on('click', closeOption);
			}, 5);
		}
		openScope = targetScope;
		closeFunction = targetCloseFunction;
	};
	var close = function() {
		openScope = null;
		$document.off('click', closeOption);
	};
	var closeOption = function() {
		if (!openScope) {
			return;
		}
		closeFunction();
		if (!$rootScope.$$phase) {
			openScope.$apply();
		}
		openScope = null;
		$document.off('click', closeOption);
	};

	return {
		registerOpen : registerOpen,
		close : close
	}
}]);;mainApp.factory('collectionService', ['$http', 'networkService', 'loggerService', 'configService', '$filter', 'statusCodeService',
		function($http, networkService, loggerService, configService, $filter, statusCodeService) {

			var getCollection = function(collectionName, callback) {
				loggerService.getLogger().info("Get collection " + collectionName);

				networkService.get(configService.getUrl("collection.get") + collectionName, function(data) {
					statusCodeService.getCollection(collectionName, callback, data);
				});
			}

			return {
				getCollection : getCollection
			}

		}]);;/*
	This is a shared service for app level config settings
 */
mainApp.factory('configService', ['networkService', '$location', '$filter', function(networkService, $location, $filter) {
	this.configObject = {};
	var configCallback = function(data) {
		this.configObject = (data) ? data : {};
	}

	var getConfig = function() {
		networkService.get("../config/config.json", configCallBack);
	}

	var setConfig = function(obj) {
		this.configObject = obj;
		if (!obj.isOnline) {
			networkService.onlyGet(true);
		}
	}
	var getUrl = function(key) {
		var urlConfig = this.configObject.isOnline ? this.configObject.url['online'] : this.configObject.url['offline'];

		var baseUrl = $location.protocol() + "://" + $location.host() + ":" + $location.port() + "/" + urlConfig.projectName + "/rest/v1/";

		return "rest/v1/" + urlConfig.map[key];
	}

	var getSortOrders = function() {
		var orders = [{
			label : $filter('translate')("sort.order.asc"),
			value : "asc"
		}, {
			label : $filter('translate')("sort.order.desc"),
			value : "desc"
		}]
		return orders;
	}

	return {
		configObject : this.configObject,
		getConfig : getConfig,
		setConfig : setConfig,
		getUrl : getUrl,
		getSortOrders : getSortOrders
	}
}]);;mainApp.factory('dialogService', ['$uibModal', function($uibModal) {
	var confirm = function(parameter) {
		var title = parameter.title;
		var msg = parameter.msg;
		var ok = parameter.ok;
		var cancel = parameter.cancel;
		$uibModal.open({
			animation : true,
			// template: msg,
			templateUrl : 'ui/app/templates/dialog-confirm.html',
			controller : ['$uibModalInstance', '$scope', function($uibModalInstance, $scope) {
				$scope.title = title;
				$scope.msg = msg;
				$scope.ok = function() {
					$uibModalInstance.close(false);
					ok && ok();
				}, $scope.cancel = function() {
					$uibModalInstance.close(false);
					cancel && cancel();
				};
			}]
		});
	};
	var notify = function(parameter) {
		var type = parameter.type;
		var title = parameter.title;
		var msg = parameter.msg;
		var ok = parameter.ok;
		$uibModal.open({
			animation : true,
			// template: msg,
			templateUrl : 'ui/app/templates/dialog-notify.html',
			controller : ['$uibModalInstance', '$scope', function($uibModalInstance, $scope) {
				$scope.type = type;
				$scope.title = title;
				$scope.msg = msg;
				$scope.ok = function() {
					$uibModalInstance.close(false);
					ok && ok();
				}
			}]
		});
	}

	return {
		confirm : confirm,
		notify : notify
	}
}]);
;/*
 * This is a service for general functions
 */

mainApp.factory('generalService', ['configService', function(configService) {

	var booleanValues = [true, false];

	var contains = function(needle) {
		// Per spec, the way to identify NaN is that it
		// is not equal to itself
		var findNaN = needle !== needle;
		var indexOf;

		if (!findNaN && typeof Array.prototype.indexOf === 'function') {
			indexOf = Array.prototype.indexOf;
		} else {
			indexOf = function(needle) {
				var i = -1, index = -1;

				for (i = 0; i < this.length; i++) {
					var item = this[i];

					if ((findNaN && item !== item) || item === needle) {
						index = i;
						break;
					}
				}

				return index;
			};
		}

		return indexOf.call(this, needle) > -1;
	};

	var containsObject = function(list, obj) {
		var i;
		for (i = 0; i < list.length; i++) {
			loggerService.getLogger().debug("List Object Id is = " + list[i].id);
			if (list[i].id == obj.id) {
				return true;
			}
		}

		return false;
	}

	var isSubFolder = function(sub, parent) {
		return sub.lastIndexOf(parent, 0) === 0;
	}

	var stringStartWith = function(string, text) {
		return string.lastIndexOf(text, 0) === 0;
	}

	var mapDayOftheWeek = {
		"0" : "sun",
		"1" : "mon",
		"2" : "tue",
		"3" : "wed",
		"4" : "thu",
		"5" : "fri",
		"6" : "sat",
		"sun" : "0",
		"mon" : "1",
		"tue" : "2",
		"wed" : "3",
		"thu" : "4",
		"fri" : "5",
		"sat" : "6"
	};

	var getDayOfTheWeek = function() {
		var arrayDayOftheWeek = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
		return arrayDayOftheWeek;
	}

	var getDayOfTheMonth = function() {
		var arrayDayOfTheMonth = [];
		for (var i = 1; i < 31; i++) {
			arrayDayOfTheMonth.push(i);
		}
		arrayDayOfTheMonth.push("L");
		return arrayDayOfTheMonth;
	}

	var getDayOfTheWeekMap = function() {
		return mapDayOftheWeek;
	}

	var getBooleanValuesArray = function() {
		return booleanValues;
	}

	return {
		contains : contains,
		containsObject : containsObject,
		isSubFolder : isSubFolder,
		getBooleanValuesArray : getBooleanValuesArray,
		getDayOfTheWeek : getDayOfTheWeek,
		getDayOfTheMonth : getDayOfTheMonth,
		getDayOfTheWeekMap : getDayOfTheWeekMap,
		stringStartWith : stringStartWith
	}
}]);;/*
	This is a shared service for app level logging
 */
mainApp.factory('loggerService', ['configService', function(configService) {
	var log = function(data, level) {
		if (configService.configObject && (level <= configService.configObject['logLevel'])) {
			loggerService.getLogger().log(data);
		}
	}
	var _console = null;
	var getLogger = function() {
		if (!_console) {
			var _tempConsole = {
				log : function() {

				}
			}
			_console = (configService.configObject && (1 <= configService.configObject['logLevel'])) ? window.console : _tempConsole;
		}
		// add check for log level
		// window.loggerService.getLogger().log(configService.configObject);
		return _console;
	}
	return {
		log : log,
		getLogger : getLogger
	}
}]);;/*
  This is a shared service is a gateway for network calls (ajax)
 */
mainApp.factory('networkService', ['$http', '$filter', 'dialogService', function($http, $filter, dialogService) {
	var errorHandler = function(response) {
		// called asynchronously if an error occurs
		// or server returns response with an error status.
		// handle generic network errors

		console.error("Status error is " + response.status);
		switch (response.status) {
			case 404 :
				loggerService.getLogger().info("Not found");
				dialogService.notify({
					type : "sc-dialog-error",
					msg : $filter('translate')('ERROR.400'),
					ok : function() {
						return;
					}
				});
				break;
			case 500 :
				loggerService.getLogger().info("Internal");
				dialogService.notify({
					type : "sc-dialog-error",
					msg : $filter('translate')('ERROR.500'),
					ok : function() {
						return;
					}
				});
				break;
			default :
				loggerService.getLogger().info("Unknown");
				dialogService.notify({
					type : "sc-dialog-error",
					msg : $filter('translate')('ERROR.unknown') + ":" + response.statusText,
					ok : function() {
						return;
					}
				});

		}
	}

	var get = function(url, callback) {
		$http({
			method : 'GET',
			url : url
		}).then(function successCallback(response) {
			// this callback will be called asynchronously
			// when the response is available
			if (callback)
				callback(response.data);
		}, errorHandler);
	}

	var post = function(url, data, callback) {

		$http({
			method : 'POST',
			data : data,
			url : url
		}).then(function successCallback(response) {
			// this callback will be called asynchronously
			// when the response is available
			if (callback)
				callback(response.data);
		}, errorHandler);

	}

	var delWithData = function(url, data, callback, contentType) {
		var req = {
			method : 'DELETE',
			headers : {},
			data : data,
			url : url
		};
		contentType && (req.headers['Content-Type'] = contentType);
		$http(req).then(function successCallback(response) {
			// this callback will be called asynchronously
			// when the response is available
			if (callback)
				callback(response.data);
		}, errorHandler);
	}

	var del = function(url, callback) {
		$http({
			method : 'DELETE',
			url : url
		}).then(function successCallback(response) {
			// this callback will be called asynchronously
			// when the response is available
			if (callback)
				callback(response.data);
		}, errorHandler);
	}

	var put = function(url, data, callback) {

		$http({
			method : 'PUT',
			data : data,
			url : url
		}).then(function successCallback(response) {
			// this callback will be called asynchronously
			// when the response is available
			if (callback)
				callback(response.data);
		}, errorHandler);

	}

	return {
		get : get,
		post : post,
		put : put,
		del : del,
		delWithData : delWithData
	}
}]);;/*
 * This is a service for sharing data between controllers
 */

mainApp.factory('sharedService', function() {
	var sharedService = {};
	sharedService.data = {};
	return sharedService;
});;mainApp.factory('statusCodeService', ['loggerService', 'configService', '$filter', 'dialogService', function(loggerService, configService, $filter, dialogService) {

	var undefinedStatusCode = function() {
		dialogService.notify({
			type : "sc-dialog-error",
			msg : $filter('translate')('status.code.missing'),
			ok : function() {
				return;
			}
		});
	}

	var create = function(type, callback, data) {
		loggerService.getLogger().info("Process response for creating " + type);
		var statusCode = data.statusCode;
		loggerService.getLogger().info("Status Code is " + statusCode);

		if (!statusCode) {
			undefinedStatusCode();
			return;
		}

		switch (statusCode) {
			case "1000" :
				if (callback) {
					callback(data);
				}
				dialogService.notify({
					type : "sc-dialog-success",
					msg : $filter('translate')('create.saved.notify'),
					ok : function() {
						return;
					}
				});
				break;
			case "5004" :
				loggerService.getLogger().error("Server error " + data.message);
				dialogService.notify({
					type : "sc-dialog-error",
					msg : $filter('translate')('ERROR.5004'),
					ok : function() {
						return;
					}
				});
				break;
			case "6000" :
				loggerService.getLogger().error("Server error " + data.message);
				dialogService.notify({
					type : "sc-dialog-error",
					msg : $filter('translate')('ERROR.6000'),
					ok : function() {
						return;
					}
				});
				break;
			default :
				loggerService.getLogger().info(data.message);
				dialogService.notify({
					type : "sc-dialog-warning",
					msg : data.message,
					ok : function() {
						return;
					}
				});
		}
	}

	var execute = function(type, callback, data) {
		loggerService.getLogger().info("Process response for executing " + type);
		var statusCode = data.statusCode;
		loggerService.getLogger().info("Status Code is " + statusCode);
		if (!statusCode) {
			undefinedStatusCode();
			return;
		}
		switch (statusCode) {
			case "1000" :
				if (callback) {
					callback(data);
				}
				dialogService.notify({
					type : "sc-dialog-success",
					msg : $filter('translate')('execute.issued.notify'),
					ok : function() {
						return;
					}
				});
				break;
			case "6000" :
				loggerService.getLogger().error("Server error " + data.message);
				dialogService.notify({
					type : "sc-dialog-error",
					msg : $filter('translate')('ERROR.6000'),
					ok : function() {
						return;
					}
				});
				break;
			default :
				loggerService.getLogger().info(data.message);
				dialogService.notify({
					type : "sc-dialog-warning",
					msg : data.message,
					ok : function() {
						return;
					}
				});
		}
	}

	var modify = function(type, callback, data) {
		loggerService.getLogger().info("Process response for modifying " + type);
		var statusCode = data.statusCode;
		loggerService.getLogger().info("Status Code is " + statusCode);
		if (!statusCode) {
			undefinedStatusCode();
			return;
		}
		switch (statusCode) {
			case "1001" :
				dialogService.notify({
					type : "sc-dialog-success",
					msg : $filter('translate')('modify.saved.notify'),
					ok : function() {
						return;
					}
				});
				if (callback) {
					callback(data);
				}
				break;
			case "5002" :
				loggerService.getLogger().error("Server error " + data.message);
				dialogService.notify({
					type : "sc-dialog-error",
					msg : $filter('translate')('ERROR.5002'),
					ok : function() {
						return;
					}
				});
				break
			case "5004" :
				loggerService.getLogger().error("Server error " + data.message);
				dialogService.notify({
					type : "sc-dialog-error",
					msg : $filter('translate')('ERROR.5004'),
					ok : function() {
						return;
					}
				});
				break
			case "6000" :
				loggerService.getLogger().error("Server error " + data.message);
				dialogService.notify({
					type : "sc-dialog-error",
					msg : $filter('translate')('ERROR.6000'),
					ok : function() {
						return;
					}
				});
				break;
			default :
				loggerService.getLogger().info(data.message);
				dialogService.notify({
					type : "sc-dialog-warning",
					msg : data.message,
					ok : function() {
						return;
					}
				});
		}
	}

	var get = function(type, callback, data) {
		loggerService.getLogger().info("Process response for getting " + type);
		var statusCode = data.statusCode;
		loggerService.getLogger().info("Status Code is " + statusCode);
		if (!statusCode) {
			undefinedStatusCode();
			return;
		}
		switch (statusCode) {
			case "1003" :
				if (callback) {
					callback(data);
				}
				break;
			case "5001" :
				if (callback) {
					callback(data);
				}
				break;
			case "6000" :
				loggerService.getLogger().error("Server error " + data.message);
				dialogService.notify({
					type : "sc-dialog-error",
					msg : $filter('translate')('ERROR.6000'),
					ok : function() {
						return;
					}
				});
				break;
			default :
				loggerService.getLogger().info(data.message);
				dialogService.notify({
					type : "sc-dialog-warning",
					msg : data.message,
					ok : function() {
						return;
					}
				});
		}
	}

	var del = function(type, callback, data) {
		loggerService.getLogger().log("Process response for deleting " + type);
		var statusCode = data.statusCode;
		loggerService.getLogger().info("Status Code is " + statusCode);
		if (!statusCode) {
			undefinedStatusCode();
			return;
		}
		switch (statusCode) {
			case "1002" :
				dialogService.notify({
					type : "sc-dialog-success",
					msg : $filter('translate')('delete.deleted.notify'),
					ok : function() {
						return;
					}
				});
				if (callback) {
					callback(data);
				}
				break;
			case "5005" :
				dialogService.notify({
					type : "sc-dialog-error",
					msg : $filter('translate')('ERROR.5005'),
					ok : function() {
						return;
					}
				});
				break;
			case "6000" :
				loggerService.getLogger().error("Server error " + data.message);
				dialogService.notify({
					type : "sc-dialog-error",
					msg : $filter('translate')('ERROR.6000'),
					ok : function() {
						return;
					}
				});
				break;
			default :
				loggerService.getLogger().info(data.message);
				dialogService.notify({
					type : "sc-dialog-warning",
					msg : data.message,
					ok : function() {
						return;
					}
				});
		}
	}

	var list = function(type, callback, data) {
		loggerService.getLogger().info("Process response for listing " + type);
		var statusCode = data.statusCode;
		loggerService.getLogger().info("Status Code is " + statusCode);
		if (!statusCode) {
			undefinedStatusCode();
			return;
		}
		switch (statusCode) {
			case "1004" :
				if (callback) {
					callback(data);
				}
				break;
			case "5000" :
				if (callback) {
					callback(data);
				}
				break;
			case "6000" :
				loggerService.getLogger().error("Server error " + data.message);
				dialogService.notify({
					type : "sc-dialog-error",
					msg : $filter('translate')('ERROR.6000'),
					ok : function() {
						return;
					}
				});
				break;
			default :
				loggerService.getLogger().info(data.message);
				dialogService.notify({
					type : "sc-dialog-warning",
					msg : data.message,
					ok : function() {
						return;
					}
				});
		}
	}

	var getCollection = function(type, callback, data) {
		loggerService.getLogger().info("Process response for getting collection of " + type);
		var statusCode = data.statusCode;
		if (!statusCode) {
			undefinedStatusCode();
			return;
		}
		switch (statusCode) {
			case "1004" :
				if (callback) {
					callback(data)
				}
				break;
			case "4006" :
				loggerService.getLogger().error("Get collection: " + data.message);
				break;
			case "5000" :
				loggerService.getLogger().info("No data found");
				if (callback) {
					callback(data)
				}
				break;
			case "6000" :
				dialogService.notify({
					type : "sc-dialog-error",
					msg : $filter('translate')('ERROR.6000'),
					ok : function() {
						return;
					}
				});
				break;
			default :
				loggerService.getLogger().info(data.message);
				dialogService.notify({
					type : "sc-dialog-warning",
					msg : data.message,
					ok : function() {
						return;
					}
				});
		}
	}

	var getSummary = function(type, callback, data) {
		loggerService.getLogger().info("Process response for getting summary of " + type);
		var statusCode = data.statusCode;
		if (!statusCode) {
			undefinedStatusCode();
			return;
		}
		switch (statusCode) {
			case "1004" :
				if (callback) {
					callback(data)
				}
				break;
			case "5000" :
				loggerService.getLogger().info("No data found");
				if (callback) {
					callback(data)
				}
				break;
			case "6000" :
				dialogService.notify({
					type : "sc-dialog-error",
					msg : $filter('translate')('ERROR.6000'),
					ok : function() {
						return;
					}
				});
				break;
			default :
				loggerService.getLogger().info(data.message);
				dialogService.notify({
					type : "sc-dialog-warning",
					msg : data.message,
					ok : function() {
						return;
					}
				});
		}
	}

	return {
		create : create,
		get : get,
		modify : modify,
		del : del,
		list : list,
		getCollection : getCollection,
		execute : execute,
		getSummary : getSummary
	}
}]);;mainApp.factory('summaryService', ['networkService', 'loggerService', 'configService', 'statusCodeService', function(networkService, loggerService, configService, statusCodeService) {

	var getSummary = function(componentName, callback) {
		loggerService.getLogger().info("Get summary of " + componentName);
		var requestData = {};
		networkService.post(configService.getUrl("summary.get") + componentName + "Summary", requestData, function(data) {
			statusCodeService.getCollection(componentName, callback, data);
		});
	}

	return {
		getSummary : getSummary,
	}

}]);